%module jshare
%{
/* header files andfunc decls */
#include "share.h"
%}
shbuf_t *shbuf_init(void);
void shbuf_catstr(shbuf_t *buf, char *data);
void shbuf_cat(shbuf_t *buf, void *data, size_t data_len);
size_t shbuf_size(shbuf_t *buf);
void shbuf_clear(shbuf_t *buf);
void shbuf_trim(shbuf_t *buf, size_t len);
void shbuf_free(shbuf_t **buf_p);
typedef unsigned int (*shmetafunc_t)(const char *key, ssize_t *klen);
shmeta_t *shmeta_init(void);
void shmeta_free(shmeta_t **meta_p);
unsigned int shmetafunc_default(const char *char_key, ssize_t *klen_p);
void shmeta_set(shmeta_t *ht, shkey_t *key, const void *val);
void shmeta_set_str(shmeta_t *h, shkey_t *key, char *value);
void shmeta_unset_str(shmeta_t *h, shkey_t *name);
void shmeta_set_void(shmeta_t *ht, shkey_t *key, void *data, size_t data_len);
void shmeta_unset_void(shmeta_t *h, shkey_t *key);
char *shmeta_get_str(shmeta_t *h, shkey_t *key);
void *shmeta_get_void(shmeta_t *h, shkey_t *key);
void *shmeta_get(shmeta_t *ht, shkey_t *key);
void shmeta_print(shmeta_t *h, shbuf_t *ret_buff);
shkey_t *shkey_bin(char *data, size_t data_len);
shkey_t *shkey_str(char *kvalue);
shkey_t *shkey_num(long kvalue);
shkey_t *shkey_uniq(void);
void shkey_free(shkey_t **key_p);
const char *shkey_print(shkey_t *key);
double shtime(void);
shtime_t shtime64(void);
shfs_ino_t *shfs_dir_base(shfs_t *tree);
shfs_ino_t *shfs_dir_cwd(shfs_t *tree);
shfs_ino_t *shfs_dir_parent(shfs_ino_t *inode);
shfs_ino_t *shfs_dir_entry(shfs_ino_t *inode, char *fname);
char *shfs_app_name(char *app_name);
shfs_ino_t *shfs_inode(shfs_ino_t *parent, char *name, int mode);
shfs_t *shfs_inode_tree(shfs_ino_t *inode);
shfs_ino_t *shfs_inode_root(shfs_ino_t *inode);
shfs_ino_t *shfs_inode_parent(shfs_ino_t *inode);
int shfs_inode_write_entity(shfs_t *tree, shfs_ino_t *ent);
int shfs_inode_write_block(shfs_t *tree, shfs_hdr_t *scan_hdr, shfs_hdr_t *hdr, char *data, size_t data_len);
ssize_t shfs_inode_write(shfs_t *tree, shfs_ino_t *inode, char *data, size_t data_of, size_t data_len);
int shfs_inode_read_block(shfs_t *tree, shfs_hdr_t *hdr, shfs_ino_t *inode);
ssize_t shfs_inode_read(shfs_t *tree, shfs_ino_t *inode, shbuf_t *ret_buff, size_t data_of, size_t data_len);
char *shfs_inode_filename(char *name);
void shfs_inode_filename_set(shfs_ino_t *inode, char *name);
char *shfs_inode_name(shfs_ino_t *inode);
char *shfs_inode_path(shfs_ino_t *inode);
shfs_t *shfs_journal_tree(shfs_journal_t *jrnl);
char *shfs_journal_path(shfs_t *tree, int index);
shfs_journal_t *shfs_journal_open(shfs_t *tree, int index);
void shfs_journal_free(shfs_t *tree, shfs_journal_t **jrnl_p);
int shfs_journal_index(shfs_ino_t *inode);
int shfs_journal_scan(shfs_t *tree, int jno);
int shfs_journal_write(shfs_journal_t *jrnl);
int shfs_journal_grow(shfs_journal_t **jrnl_p);
int shfs_journal_close(shfs_journal_t **jrnl_p);
int shfs_meta(shfs_t *tree, shfs_ino_t *ent, shmeta_t **val_p);
int shfs_meta_save(shfs_t *tree, shfs_ino_t *ent, shmeta_t *h);
shfs_t *shfs_init(char *app_name, int flags);
void shfs_free(shfs_t **tree_p);
shkey_t shfs_partition_id(shfs_t *tree);
int shfs_proc_lock(char *process_path, char *runtime_mode);
int shfs_read_mem(char *path, char **data_p, size_t *data_len_p);
int shfs_write_mem(char *path, void *data, size_t data_len);
int shfs_write_print(shfs_t *tree, shfs_ino_t *inode, int fd);
int shaccept(int sockfd);
int shbindsk(int sockfd, char *hostname, unsigned int port);
int shbind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int shclose(int sk);
int shconn(int sk, char *host, unsigned short port, int async);
struct hostent *shgethostbyname(char *name);
struct hostent *shpeer(char *name);
ssize_t shread(int fd, const void *buf, size_t count);
int shfcntl(int fd, int cmd, long arg);
ssize_t shwrite(int fd, const void *buf, size_t count);
int shsk(void);
int shsocket(int domain, int type, int protocol);
void test_main(void);
