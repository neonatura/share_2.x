!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEFAULT_SCRYPT_DIFFICULTY	transaction.c	28;"	d	file:
DEFAULT_SCRYPT_NBIT	transaction.c	29;"	d	file:
LEDGERF_UPDATE	ledger.c	28;"	d	file:
MAXIMUM_APP_TRUST	app.c	29;"	d	file:
MAX_SCHEDULE_TASKS	bits.h	21;"	d
MAX_TRANSACTIONS_PER_LEDGER	bits.h	19;"	d
MAX_TX_ONCE	bits.h	17;"	d
MINIMUM_APP_TRUST	app.c	28;"	d	file:
MIN_TX_ONCE	bits.h	15;"	d
SHARENET_PROTOCOL_VERSION	bits.h	23;"	d
SHMETRIC_CARD	bits.h	282;"	d
SHMETRIC_NONE	bits.h	281;"	d
SHMETRIC_ZTEX	bits.h	283;"	d
TXFILE_CHECKSUM	bits.h	322;"	d
TXFILE_LINK	bits.h	320;"	d
TXFILE_LIST	bits.h	319;"	d
TXFILE_NONE	bits.h	316;"	d
TXFILE_READ	bits.h	317;"	d
TXFILE_UNLINK	bits.h	321;"	d
TXFILE_WRITE	bits.h	318;"	d
TXF_TRUST	bits.h	108;"	d
TXHASH_FCRYPT	transaction.h	34;"	d
TXHASH_SCRYPT	transaction.h	33;"	d
__BITS__ACCOUNT_H__	account.h	30;"	d
__BITS__APP_H__	app.h	30;"	d
__BITS__BITS_H__	bits.h	3;"	d
__BITS__EVENT_C__	event.c	29;"	d	file:
__BITS__EVENT_H__	event.h	30;"	d
__BITS__IDENTITY_H__	identity.h	29;"	d
__BITS__LEDGER_H__	ledger.h	30;"	d
__BITS__SCHEDULE_H__	schedule.h	31;"	d
__BITS__SESSION_H__	session.h	23;"	d
__BITS__SIGNATURE_H__	signature.h	31;"	d
__BITS__THREAD_H__	thread.h	30;"	d
__BITS__TRANSACTION_H__	transaction.h	30;"	d
__BITS__TRUST_H__	trust.h	31;"	d
__BITS__WARD_H__	ward.h	30;"	d
_fcrypt_generate_transaction_id	transaction.c	/^static void _fcrypt_generate_transaction_id(tx_t *tx)$/;"	f	file:
_generate_app_tx	app.c	/^static int _generate_app_tx(tx_app_t *app, shpeer_t *peer)$/;"	f	file:
_generate_session_shadow	session.c	/^static int _generate_session_shadow(tx_id_t *id, tx_session_t *sess)$/;"	f	file:
_scrypt_generate_transaction_id	transaction.c	/^static int _scrypt_generate_transaction_id(tx_t *tx, char *phash, char *hash, char **merkle_list)$/;"	f	file:
abandon_ledger	ledger.c	/^void abandon_ledger(tx_t *tx)$/;"	f
acc_tx	bits.h	/^  tx_t acc_tx;$/;"	m	struct:tx_account_t
app_arch	bits.h	/^  uint32_t app_arch;$/;"	m	struct:tx_app_t
app_birth	bits.h	/^  shtime_t app_birth;$/;"	m	struct:tx_app_t
app_context	bits.h	/^  shkey_t app_context;$/;"	m	struct:tx_app_t
app_flags	bits.h	/^  uint32_t app_flags;$/;"	m	struct:tx_app_t
app_peer	bits.h	/^  shpeer_t app_peer;$/;"	m	struct:tx_app_t
app_sig	bits.h	/^  shkey_t app_sig;$/;"	m	struct:tx_app_t
app_stamp	bits.h	/^  shtime_t app_stamp;$/;"	m	struct:tx_app_t
app_trust	bits.h	/^  uint32_t app_trust;$/;"	m	struct:tx_app_t
app_tx	bits.h	/^  tx_t app_tx;$/;"	m	struct:tx_app_t
bond_basis	bits.h	/^  uint64_t bond_basis;$/;"	m	struct:tx_bond_t
bond_credit	bits.h	/^  uint64_t bond_credit;$/;"	m	struct:tx_bond_t
bond_expire	bits.h	/^  shtime_t bond_expire;$/;"	m	struct:tx_bond_t
bond_label	bits.h	/^  char bond_label[MAX_SHARE_NAME_LENGTH];$/;"	m	struct:tx_bond_t
bond_sess	bits.h	/^  shkey_t bond_sess;$/;"	m	struct:tx_bond_t
bond_sig	bits.h	/^  shsig_t bond_sig;$/;"	m	struct:tx_bond_t
bond_sink	bits.h	/^  char bond_sink[MAX_SHARE_HASH_LENGTH];$/;"	m	struct:tx_bond_t
bond_stamp	bits.h	/^  shtime_t bond_stamp;$/;"	m	struct:tx_bond_t
bond_tx	bits.h	/^  tx_t bond_tx;$/;"	m	struct:tx_bond_t
confirm_account	account.c	/^int confirm_account(tx_account_t *acc)$/;"	f
confirm_app	app.c	/^int confirm_app(tx_app_t *app)$/;"	f
confirm_event	event.c	/^int confirm_event(tx_event_t *event)$/;"	f
confirm_signature	signature.c	/^int confirm_signature(shsig_t *sig, shkey_t *sig_key, char *tx_hash)$/;"	f
confirm_ward	ward.c	/^int confirm_ward(tx_ward_t *ward)$/;"	f
decr_app_trust	app.c	/^void decr_app_trust(tx_app_t *cli)$/;"	f
event_peer	bits.h	/^  shpeer_t event_peer;$/;"	m	struct:tx_event_t
event_sig	bits.h	/^  shsig_t event_sig;$/;"	m	struct:tx_event_t
event_stamp	bits.h	/^  shtime_t event_stamp;$/;"	m	struct:tx_event_t
event_tx	bits.h	/^  tx_t event_tx;$/;"	m	struct:tx_event_t
flags	ledger.h	/^  int flags;$/;"	m	struct:ledger_t
free_account	account.c	/^void free_account(tx_account_t **acc_p)$/;"	f
free_ledger	ledger.c	/^void free_ledger(tx_ledger_t **ledger_p, tx_t **tx_p)$/;"	f
generate_account	account.c	/^tx_account_t *generate_account(shseed_t *seed)$/;"	f
generate_event	event.c	/^int generate_event(tx_event_t *event, shpeer_t *peer, time_t duration)$/;"	f
generate_signature	signature.c	/^void generate_signature(shsig_t *sig, shpeer_t *peer, tx_t *tx)$/;"	f
generate_trust	trust.c	/^int generate_trust(tx_trust_t *trust, shpeer_t *peer, shkey_t *context)$/;"	f
generate_ward	ward.c	/^int generate_ward(tx_ward_t *ward, tx_t *tx, tx_id_t *id)$/;"	f
global_identity_confirm	identity.c	/^int global_identity_confirm(tx_id_t *id)$/;"	f
global_session_confirm	session.c	/^int global_session_confirm(tx_session_t *sess)$/;"	f
hash	bits.h	/^  char hash[MAX_SHARE_HASH_LENGTH];$/;"	m	struct:tx_t
id_key	bits.h	/^  shkey_t id_key;$/;"	m	struct:tx_id_t
id_peer	bits.h	/^  shpeer_t id_peer;$/;"	m	struct:tx_id_t
id_stamp	bits.h	/^  shtime_t id_stamp;$/;"	m	struct:tx_id_t
id_tx	bits.h	/^  tx_t id_tx;$/;"	m	struct:tx_id_t
id_uid	bits.h	/^  uint64_t id_uid;$/;"	m	struct:tx_id_t
incr_app_trust	app.c	/^void incr_app_trust(tx_app_t *cli)$/;"	f
init_app	app.c	/^tx_app_t *init_app(shpeer_t *peer)$/;"	f
ino	bits.h	/^  shfs_hdr_t ino;$/;"	m	struct:tx_file_t
ino_data	bits.h	/^  uint8_t ino_data[0];$/;"	m	struct:tx_file_t
ino_of	bits.h	/^  uint32_t ino_of;$/;"	m	struct:tx_file_t
ino_op	bits.h	/^  uint32_t ino_op;$/;"	m	struct:tx_file_t
ino_peer	bits.h	/^  shpeer_t ino_peer;$/;"	m	struct:tx_file_t
ino_size	bits.h	/^  uint32_t ino_size;$/;"	m	struct:tx_file_t
ino_stamp	bits.h	/^  shtime_t ino_stamp;$/;"	m	struct:tx_file_t
ino_tx	bits.h	/^  tx_t ino_tx;$/;"	m	struct:tx_file_t
job	bits.h	/^  sexe_job_t job;$/;"	m	struct:tx_job_t
job_app	bits.h	/^  shpeer_t job_app;$/;"	m	struct:tx_job_t
job_op	bits.h	/^  uint16_t job_op;$/;"	m	struct:tx_job_t
job_status	bits.h	/^  uint32_t job_status;$/;"	m	struct:tx_job_t
job_tx	bits.h	/^  tx_t job_tx;$/;"	m	struct:tx_job_t
job_tx	bits.h	/^  tx_t job_tx;$/;"	m	struct:tx_task_t
ledger	bits.h	/^  tx_t ledger[0];$/;"	m	struct:tx_ledger_t
ledger	ledger.h	/^  tx_t *ledger;$/;"	m	struct:ledger_t
ledger_archive	ledger.c	/^int ledger_archive(ledger_t *l)$/;"	f
ledger_buff	ledger.h	/^  shbuf_t *ledger_buff;$/;"	m	struct:ledger_t
ledger_close	ledger.c	/^int ledger_close(ledger_t *l)$/;"	f
ledger_fee	bits.h	/^  uint64_t ledger_fee;$/;"	m	struct:tx_ledger_t
ledger_height	bits.h	/^  uint32_t ledger_height;$/;"	m	struct:tx_ledger_t
ledger_init	ledger.c	/^static ledger_t *ledger_init(void)$/;"	f	file:
ledger_load	ledger.c	/^ledger_t *ledger_load(shpeer_t *peer, shtime_t now)$/;"	f
ledger_peer	bits.h	/^  shpeer_t ledger_peer;$/;"	m	struct:tx_ledger_t
ledger_save	ledger.c	/^int ledger_save(ledger_t *l)$/;"	f
ledger_seq	bits.h	/^  uint32_t ledger_seq;$/;"	m	struct:tx_ledger_t
ledger_sig	bits.h	/^  shkey_t ledger_sig;$/;"	m	struct:tx_ledger_t
ledger_stamp	bits.h	/^  uint64_t ledger_stamp;$/;"	m	struct:tx_ledger_t
ledger_t	ledger.h	/^typedef struct ledger_t$/;"	s
ledger_t	ledger.h	/^} ledger_t;$/;"	t	typeref:struct:ledger_t
ledger_tx	bits.h	/^  tx_t ledger_tx;$/;"	m	struct:tx_ledger_t
ledger_tx_add	ledger.c	/^int ledger_tx_add(ledger_t *l, tx_t *tx)$/;"	f
ledger_tx_load	ledger.c	/^tx_t *ledger_tx_load(shpeer_t *peer, char *tx_hash, shtime_t tx_stamp)$/;"	f
lic	bits.h	/^  shlic_t lic;$/;"	m	struct:tx_license_t
lic_cert	bits.h	/^  shcert_t lic_cert;$/;"	m	struct:tx_license_t
lic_id	bits.h	/^  shkey_t lic_id;$/;"	m	struct:tx_license_t
lic_tx	bits.h	/^  tx_t lic_tx;$/;"	m	struct:tx_license_t
load_def_account_tx	account.c	/^tx_account_t *load_def_account_tx(char *id_hash)$/;"	f
local_broadcast_metric	metric.c	/^int local_broadcast_metric(tx_metric_t *metric)$/;"	f
local_broadcast_trust	trust.c	/^int local_broadcast_trust(tx_trust_t *trust)$/;"	f
local_confirm_metric	metric.c	/^int local_confirm_metric(tx_metric_t *metric, uint64_t sig)$/;"	f
local_identity_generate	identity.c	/^int local_identity_generate(uint64_t uid, shpeer_t *app_peer, tx_id_t **id_p)$/;"	f
local_identity_inform	identity.c	/^int local_identity_inform(tx_app_t *cli, tx_id_t *id)$/;"	f
local_identity_shadow_generate	identity.c	/^static int local_identity_shadow_generate(tx_id_t *id)$/;"	f	file:
local_metric_generate	metric.c	/^int local_metric_generate(int type, void *data, size_t data_len, tx_metric_t **metric_p)$/;"	f
local_session_generate	session.c	/^int local_session_generate(tx_id_t *id, shtime_t sess_stamp, tx_session_t **sess_p)$/;"	f
local_session_inform	session.c	/^int local_session_inform(tx_app_t *cli, tx_session_t *session)$/;"	f
local_transid_generate	transaction.c	/^int local_transid_generate(int tx_op, tx_t *tx)$/;"	f
mem	bits.h	/^  sexe_mem_t mem;$/;"	m	struct:tx_mem_t
mem_data	bits.h	/^  unsigned char mem_data[0];$/;"	m	struct:tx_mem_t
mem_op	bits.h	/^  uint32_t mem_op;$/;"	m	struct:tx_mem_t
mem_sink	bits.h	/^  shkey_t mem_sink;$/;"	m	struct:tx_mem_t
mem_status	bits.h	/^  uint32_t mem_status;$/;"	m	struct:tx_mem_t
mem_tx	bits.h	/^  tx_t mem_tx;$/;"	m	struct:tx_mem_t
met_acc	bits.h	/^  uint64_t met_acc; $/;"	m	struct:tx_metric_t
met_expire	bits.h	/^  shtime_t met_expire;$/;"	m	struct:tx_metric_t
met_flags	bits.h	/^  uint32_t met_flags; $/;"	m	struct:tx_metric_t
met_id	bits.h	/^  shkey_t met_id;$/;"	m	struct:tx_metric_t
met_name	bits.h	/^  char met_name[8];$/;"	m	struct:tx_metric_t
met_sig	bits.h	/^  shkey_t met_sig;$/;"	m	struct:tx_metric_t
met_tx	bits.h	/^  tx_t met_tx;$/;"	m	struct:tx_metric_t
met_type	bits.h	/^  uint32_t met_type;$/;"	m	struct:tx_metric_t
net	bits.h	/^  tx_net_t net;$/;"	m	struct:tx_t
net	ledger.h	/^  tx_ledger_t *net;$/;"	m	struct:ledger_t
nonce	bits.h	/^  uint32_t nonce;$/;"	m	struct:tx_t
pam_seed	bits.h	/^  shseed_t pam_seed;$/;"	m	struct:tx_account_t
parent_hash	bits.h	/^  char parent_hash[MAX_SHARE_HASH_LENGTH];$/;"	m	struct:tx_ledger_t
peer	bits.h	/^  shpeer_t peer;$/;"	m	struct:tx_peer_t
peer_stamp	bits.h	/^  shtime_t peer_stamp;$/;"	m	struct:tx_peer_t
peer_tx	bits.h	/^  tx_t peer_tx;$/;"	m	struct:tx_peer_t
prep_transaction	transaction.c	/^int prep_transaction(tx_t *tx)$/;"	f
process_account_tx	account.c	/^int process_account_tx(tx_account_t *acc)$/;"	f
process_app_tx	app.c	/^int process_app_tx(tx_app_t *app)$/;"	f
process_event_tx	event.c	/^int process_event_tx(tx_event_t *event)$/;"	f
process_ledger_tx	ledger.c	/^int process_ledger_tx(tx_app_t *cli, tx_ledger_t *ledger)$/;"	f
process_trust_tx	trust.c	/^int process_trust_tx(tx_trust_t *trust)$/;"	f
process_ward_tx	ward.c	/^int process_ward_tx(tx_app_t *cli, tx_ward_t *ward)$/;"	f
propose_ledger	ledger.c	/^void propose_ledger(tx_ledger_t *led, tx_t *payload, size_t size)$/;"	f
remote_identity_inform	identity.c	/^int remote_identity_inform(tx_id_t *id)$/;"	f
remote_session_inform	session.c	/^int remote_session_inform(tx_session_t *sess)$/;"	f
remote_trust_receive	trust.c	/^int remote_trust_receive(tx_app_t *cli, tx_trust_t *trust)$/;"	f
sched_tx	schedule.c	/^void sched_tx(void *data, size_t data_len)$/;"	f
sched_tx_payload	schedule.c	/^void sched_tx_payload(void *data, size_t data_len, void *payload, size_t payload_len)$/;"	f
sess	bits.h	/^  sexe_sess_t sess;$/;"	m	struct:tx_sess_t
sess_heap	bits.h	/^  tx_file_t sess_heap;$/;"	m	struct:tx_sess_t
sess_id	bits.h	/^  shkey_t sess_id;$/;"	m	struct:tx_session_t
sess_key	bits.h	/^  shkey_t sess_key;$/;"	m	struct:tx_session_t
sess_stamp	bits.h	/^  shtime_t sess_stamp;$/;"	m	struct:tx_session_t
sess_tx	bits.h	/^  tx_t sess_tx;$/;"	m	struct:tx_sess_t
sess_tx	bits.h	/^  tx_t sess_tx;$/;"	m	struct:tx_session_t
sharedaemon_account	account.c	/^tx_account_t *sharedaemon_account(void)$/;"	f
task	bits.h	/^  sexe_task_t task;$/;"	m	struct:tx_task_t
task_op	bits.h	/^  uint16_t task_op;$/;"	m	struct:tx_task_t
th	bits.h	/^  sexe_thread_t th;$/;"	m	struct:tx_thread_t
th_app	bits.h	/^  shpeer_t th_app;$/;"	m	struct:tx_thread_t
th_id	bits.h	/^  shkey_t th_id;$/;"	m	struct:tx_thread_t
th_sig	bits.h	/^  shsig_t th_sig;$/;"	m	struct:tx_thread_t
th_stamp	bits.h	/^  shtime_t th_stamp;$/;"	m	struct:tx_thread_t
th_status	bits.h	/^  tx_mem_t th_status;$/;"	m	struct:tx_thread_t
th_tx	bits.h	/^  tx_t th_tx;$/;"	m	struct:tx_thread_t
trust_context	bits.h	/^  shkey_t trust_context;$/;"	m	struct:tx_trust_t
trust_peer	bits.h	/^  shkey_t trust_peer;$/;"	m	struct:tx_trust_t
trust_sig	bits.h	/^  shkey_t trust_sig;$/;"	m	struct:tx_trust_t
trust_tx	bits.h	/^  tx_t trust_tx;$/;"	m	struct:tx_trust_t
tx_account_t	bits.h	/^struct tx_account_t $/;"	s
tx_account_t	bits.h	/^typedef struct tx_account_t tx_account_t;$/;"	t	typeref:struct:tx_account_t
tx_app_t	bits.h	/^struct tx_app_t $/;"	s
tx_app_t	bits.h	/^typedef struct tx_app_t tx_app_t; $/;"	t	typeref:struct:tx_app_t
tx_bond_t	bits.h	/^typedef struct tx_bond_t$/;"	s
tx_bond_t	bits.h	/^} tx_bond_t;$/;"	t	typeref:struct:tx_bond_t
tx_crc	bits.h	/^  uint64_t tx_crc;$/;"	m	struct:tx_net_t
tx_endian	bits.h	/^  uint32_t tx_endian;$/;"	m	struct:tx_net_t
tx_event_t	bits.h	/^typedef struct tx_event_t$/;"	s
tx_event_t	bits.h	/^} tx_event_t;$/;"	t	typeref:struct:tx_event_t
tx_fee	bits.h	/^  uint64_t tx_fee;$/;"	m	struct:tx_net_t
tx_file_t	bits.h	/^typedef struct tx_file_t$/;"	s
tx_file_t	bits.h	/^} tx_file_t;$/;"	t	typeref:struct:tx_file_t
tx_hop	bits.h	/^  uint16_t tx_hop;$/;"	m	struct:tx_net_t
tx_id_t	bits.h	/^struct tx_id_t $/;"	s
tx_id_t	bits.h	/^typedef struct tx_id_t tx_id_t; $/;"	t	typeref:struct:tx_id_t
tx_job_t	bits.h	/^struct tx_job_t$/;"	s
tx_job_t	bits.h	/^typedef struct tx_job_t tx_job_t;$/;"	t	typeref:struct:tx_job_t
tx_ledger_t	bits.h	/^struct tx_ledger_t$/;"	s
tx_ledger_t	bits.h	/^typedef struct tx_ledger_t tx_ledger_t;$/;"	t	typeref:struct:tx_ledger_t
tx_license_t	bits.h	/^struct tx_license_t$/;"	s
tx_license_t	bits.h	/^typedef struct tx_license_t tx_license_t;$/;"	t	typeref:struct:tx_license_t
tx_mem_t	bits.h	/^struct tx_mem_t$/;"	s
tx_mem_t	bits.h	/^typedef struct tx_mem_t tx_mem_t;$/;"	t	typeref:struct:tx_mem_t
tx_method	bits.h	/^  uint16_t tx_method;$/;"	m	struct:tx_t
tx_metric_t	bits.h	/^struct tx_metric_t$/;"	s
tx_metric_t	bits.h	/^typedef struct tx_metric_t tx_metric_t;$/;"	t	typeref:struct:tx_metric_t
tx_net_t	bits.h	/^typedef struct tx_net_t$/;"	s
tx_net_t	bits.h	/^} tx_net_t;$/;"	t	typeref:struct:tx_net_t
tx_op	bits.h	/^  uint16_t tx_op;$/;"	m	struct:tx_t
tx_peer	bits.h	/^  shkey_t tx_peer;$/;"	m	struct:tx_t
tx_peer_t	bits.h	/^struct tx_peer_t $/;"	s
tx_peer_t	bits.h	/^typedef struct tx_peer_t tx_peer_t;$/;"	t	typeref:struct:tx_peer_t
tx_sess_t	bits.h	/^typedef struct tx_sess_t$/;"	s
tx_sess_t	bits.h	/^} tx_sess_t;$/;"	t	typeref:struct:tx_sess_t
tx_session_t	bits.h	/^typedef struct tx_session_t$/;"	s
tx_session_t	bits.h	/^} tx_session_t;$/;"	t	typeref:struct:tx_session_t
tx_sink	bits.h	/^  shkey_t tx_sink;$/;"	m	struct:tx_net_t
tx_stamp	bits.h	/^  shtime_t tx_stamp;$/;"	m	struct:tx_net_t
tx_stamp	bits.h	/^  shtime_t tx_stamp;$/;"	m	struct:tx_t
tx_state	bits.h	/^  uint16_t tx_state;$/;"	m	struct:tx_net_t
tx_t	bits.h	/^typedef struct tx_t$/;"	s
tx_t	bits.h	/^} tx_t;$/;"	t	typeref:struct:tx_t
tx_task_t	bits.h	/^struct tx_task_t$/;"	s
tx_task_t	bits.h	/^typedef struct tx_task_t tx_task_t;$/;"	t	typeref:struct:tx_task_t
tx_thread_t	bits.h	/^struct tx_thread_t$/;"	s
tx_thread_t	bits.h	/^typedef struct tx_thread_t tx_thread_t;$/;"	t	typeref:struct:tx_thread_t
tx_trust_t	bits.h	/^struct tx_trust_t $/;"	s
tx_trust_t	bits.h	/^typedef struct tx_trust_t tx_trust_t; $/;"	t	typeref:struct:tx_trust_t
tx_ver	bits.h	/^  uint16_t tx_ver;$/;"	m	struct:tx_net_t
tx_vm_t	bits.h	/^typedef struct tx_vm_t$/;"	s
tx_vm_t	bits.h	/^} tx_vm_t;$/;"	t	typeref:struct:tx_vm_t
tx_ward_t	bits.h	/^typedef struct tx_ward_t $/;"	s
tx_ward_t	bits.h	/^} tx_ward_t;$/;"	t	typeref:struct:tx_ward_t
validate_trust	trust.c	/^int validate_trust(tx_trust_t *trust)$/;"	f
vm	bits.h	/^  sexe_vm_t vm;$/;"	m	struct:tx_vm_t
vm_op	bits.h	/^  uint32_t vm_op;$/;"	m	struct:tx_vm_t
vm_tx	bits.h	/^  tx_t vm_tx;$/;"	m	struct:tx_vm_t
ward_hash	bits.h	/^  char ward_hash[MAX_SHARE_HASH_LENGTH];$/;"	m	struct:tx_ward_t
ward_id	bits.h	/^  tx_id_t ward_id;$/;"	m	struct:tx_ward_t
ward_op	bits.h	/^  uint16_t ward_op; $/;"	m	struct:tx_ward_t
ward_sig	bits.h	/^  shsig_t ward_sig; $/;"	m	struct:tx_ward_t
ward_stamp	bits.h	/^  shtime_t ward_stamp;$/;"	m	struct:tx_ward_t
ward_tx	bits.h	/^  tx_t ward_tx;$/;"	m	struct:tx_ward_t
