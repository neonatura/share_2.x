!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEFAULT_SCRYPT_DIFFICULTY	transaction.c	28;"	d	file:
DEFAULT_SCRYPT_NBIT	transaction.c	29;"	d	file:
INIT_TX_KEY	init.c	28;"	d	file:
LEDGERF_UPDATE	ledger.c	28;"	d	file:
SEG_CHECKSUM_SIZE	file.c	464;"	d	file:
TXOP	bits.c	27;"	d	file:
__BITS_C__	bits.c	22;"	d	file:
__BITS__EVENT_C__	event.c	29;"	d	file:
_asset_labels	asset.c	/^static const char *_asset_labels[MAX_TX_ASSETS] = {$/;"	v	file:
_fcrypt_generate_transaction_id	transaction.c	/^static void _fcrypt_generate_transaction_id(tx_t *tx)$/;"	f	file:
_scrypt_generate_transaction_id	transaction.c	/^static int _scrypt_generate_transaction_id(tx_t *tx, char *phash, char *hash, char **merkle_list)$/;"	f	file:
_txop_table	bits.c	/^static txop_t _txop_table[MAX_TX] = {$/;"	v	file:
abandon_ledger	ledger.c	/^void abandon_ledger(tx_t *tx)$/;"	f
alloc_account	account.c	/^tx_account_t *alloc_account(shseed_t *seed)$/;"	f
alloc_account_user	account.c	/^tx_account_t *alloc_account_user(char *username, char *passphrase, uint64_t salt)$/;"	f
alloc_app	app.c	/^tx_app_t *alloc_app(shpeer_t *peer)$/;"	f
alloc_clock	clock.c	/^tx_clock_t *alloc_clock(shpeer_t *clock_peer)$/;"	f
alloc_context	context.c	/^tx_context_t *alloc_context(tx_t *ref_tx, shkey_t *ctx_key)$/;"	f
alloc_context_data	context.c	/^tx_context_t *alloc_context_data(tx_t *ref_tx, void *data, size_t data_len)$/;"	f
alloc_contract	contract.c	/^tx_contract_t *alloc_contract(char *type, char *name, char *key)$/;"	f
alloc_eval	eval.c	/^tx_eval_t *alloc_eval(tx_event_t *event, tx_context_t *ctx, uint64_t user_id, shnum_t value)$/;"	f
alloc_event	event.c	/^tx_event_t *alloc_event(shgeo_t *geo, shtime_t stamp)$/;"	f
alloc_file	file.c	/^tx_file_t *alloc_file(shfs_ino_t *inode)$/;"	f
alloc_file_path	file.c	/^tx_file_t *alloc_file_path(shpeer_t *peer, char *path)$/;"	f
alloc_ident	identity.c	/^tx_id_t *alloc_ident(uint64_t uid, shpeer_t *app_peer)$/;"	f
alloc_metric	metric.c	/^tx_metric_t *alloc_metric(int type, void *data, size_t *data_len)$/;"	f
alloc_ref	reference.c	/^tx_ref_t *alloc_ref(tx_t *tx, char *name, char *hash, int type)$/;"	f
alloc_session	session.c	/^tx_session_t *alloc_session(uint64_t uid, shkey_t *id_key, shtime_t stamp)$/;"	f
alloc_session_peer	session.c	/^tx_session_t *alloc_session_peer(uint64_t uid, shpeer_t *peer)$/;"	f
alloc_subscribe	subscribe.c	/^tx_subscribe_t *alloc_subscribe(shkey_t *key, int op_type, int flags)$/;"	f
alloc_wallet	wallet.c	/^tx_wallet_t *alloc_wallet(char *type, char *name, char *key)$/;"	f
alloc_ward	ward.c	/^tx_ward_t *alloc_ward(tx_t *tx, tx_context_t *ctx)$/;"	f
asset_type_label	asset.c	/^const char *asset_type_label(int type)$/;"	f
complete_bond	bond.c	/^int complete_bond(tx_bond_t *bond) $/;"	f
confirm_asset	asset.c	/^int confirm_asset(tx_asset_t *asset)$/;"	f
confirm_bond_value	bond.c	/^int confirm_bond_value(tx_bond_t *bond, double fee)$/;"	f
confirm_tx_key	bits.c	/^int confirm_tx_key(txop_t *op, tx_t *tx)$/;"	f
create_bond	bond.c	/^tx_bond_t *create_bond(shkey_t *bond_key, double duration, double fee, double basis)$/;"	f
create_bond_asset	asset.c	/^int create_bond_asset(shkey_t *id_key, tx_bond_t *bond, size_t bond_nr, tx_asset_t **asset_p)$/;"	f
create_bond_peer	bond.c	/^tx_bond_t *create_bond_peer(shpeer_t *receiver, shpeer_t *ref, double duration, double fee, double basis)$/;"	f
decr_app_trust	app.c	/^void decr_app_trust(tx_app_t *cli)$/;"	f
free_asset	asset.c	/^void free_asset(tx_asset_t **asset_p)$/;"	f
free_bond	bond.c	/^void free_bond(tx_bond_t **bond_p)$/;"	f
free_ledger	ledger.c	/^void free_ledger(tx_ledger_t **ledger_p, tx_t **tx_p)$/;"	f
generate_asset_signature	asset.c	/^void generate_asset_signature(tx_asset_t *asset, shpeer_t *peer)$/;"	f
generate_bond_signature	bond.c	/^static void generate_bond_signature(tx_bond_t *bond)$/;"	f	file:
get_bond_key	bond.c	/^shkey_t *get_bond_key(shkey_t *sender, shkey_t *receiver, shkey_t *ref)$/;"	f
get_bond_state	bond.c	/^int get_bond_state(tx_bond_t *bond)$/;"	f
get_tx_inode	file.c	/^static void get_tx_inode(tx_file_t *tx, shfs_t **fs_p, shfs_ino_t **ino_p)$/;"	f	file:
get_tx_key	bits.c	/^shkey_t *get_tx_key(tx_t *tx)$/;"	f
get_tx_label	bits.c	/^const char *get_tx_label(int tx_op)$/;"	f
get_tx_op	bits.c	/^txop_t *get_tx_op(int tx_op)$/;"	f
get_tx_size	bits.c	/^size_t get_tx_size(tx_t *tx)$/;"	f
incr_app_trust	app.c	/^void incr_app_trust(tx_app_t *cli)$/;"	f
inittx_account	account.c	/^int inittx_account(tx_account_t *acc, shseed_t *seed)$/;"	f
inittx_app	app.c	/^int inittx_app(tx_app_t *app, shpeer_t *peer)$/;"	f
inittx_clock	clock.c	/^int inittx_clock(tx_clock_t *clock, shpeer_t *clock_peer)$/;"	f
inittx_context	context.c	/^int inittx_context(tx_context_t *tx, tx_t *ref_tx, shkey_t *ctx_key)$/;"	f
inittx_contract	contract.c	/^int inittx_contract(tx_contract_t *con, char *type, char *name, char *key)$/;"	f
inittx_eval	eval.c	/^int inittx_eval(tx_eval_t *eval, tx_event_t *event, tx_context_t *ctx, uint64_t user_id, shnum_t value)$/;"	f
inittx_event	event.c	/^int inittx_event(tx_event_t *event, shgeo_t *geo, shtime_t stamp)$/;"	f
inittx_file	file.c	/^int inittx_file(tx_file_t *file, shfs_ino_t *inode)$/;"	f
inittx_ident	identity.c	/^int inittx_ident(tx_id_t *id, uint64_t uid, shpeer_t *app_peer)$/;"	f
inittx_license	license.c	/^int inittx_license(tx_license_t *tx, shlic_t *lic, shcert_t *lic_cert, shkey_t *lic_id)$/;"	f
inittx_metric	metric.c	/^int inittx_metric(tx_metric_t *met, int type, void *data, size_t *data_len)$/;"	f
inittx_ref	reference.c	/^int inittx_ref(tx_ref_t *ref, tx_t *tx, char *name, char *hash, int type)$/;"	f
inittx_session	session.c	/^int inittx_session(tx_session_t *sess, uint64_t uid, shkey_t *id_key, shtime_t stamp)$/;"	f
inittx_subscribe	subscribe.c	/^int inittx_subscribe(tx_subscribe_t *sub, shkey_t *key, int op_type, int flags)$/;"	f
inittx_trust	trust.c	/^int inittx_trust(tx_trust_t *trust, tx_t *ref_tx, shkey_t *context)$/;"	f
inittx_wallet	wallet.c	/^int inittx_wallet(tx_wallet_t *wal, char *type, char *name, char *key)$/;"	f
inittx_ward	ward.c	/^int inittx_ward(tx_ward_t *ward, tx_t *tx, tx_context_t *ctx)$/;"	f
is_tx_stored	bits.c	/^static int is_tx_stored(int tx_op)$/;"	f	file:
ledger_archive	ledger.c	/^int ledger_archive(ledger_t *l)$/;"	f
ledger_close	ledger.c	/^int ledger_close(ledger_t *l)$/;"	f
ledger_height	ledger.c	/^int ledger_height(ledger_t *l)$/;"	f
ledger_init	ledger.c	/^static ledger_t *ledger_init(void)$/;"	f	file:
ledger_load	ledger.c	/^ledger_t *ledger_load(shkey_t *lkey, shtime_t now)$/;"	f
ledger_save	ledger.c	/^int ledger_save(ledger_t *l)$/;"	f
ledger_tx_add	ledger.c	/^int ledger_tx_add(ledger_t *l, tx_t *tx)$/;"	f
ledger_tx_load	ledger.c	/^tx_t *ledger_tx_load(shkey_t *lkey, char *tx_hash, shtime_t tx_stamp)$/;"	f
load_asset	asset.c	/^tx_asset_t *load_asset(shkey_t *asset_key)$/;"	f
load_asset_peer	asset.c	/^shpeer_t *load_asset_peer(shkey_t *id_key)$/;"	f
load_bond	bond.c	/^tx_bond_t *load_bond(shkey_t *bond_key)$/;"	f
load_bond_peer	bond.c	/^tx_bond_t *load_bond_peer(shpeer_t *sender, shpeer_t *receiver, shpeer_t *ref)$/;"	f
local_asset_notification	asset.c	/^int local_asset_notification(shpeer_t *peer, int tx, unsigned char *asset_data, size_t asset_size)$/;"	f
local_bond_notification	bond.c	/^int local_bond_notification(shpeer_t *peer, shfs_hdr_t *blk)$/;"	f
local_broadcast_asset	asset.c	/^int local_broadcast_asset(tx_asset_t *asset)$/;"	f
local_broadcast_bond	bond.c	/^int local_broadcast_bond(tx_bond_t *bond)$/;"	f
local_confirm_asset	asset.c	/^int local_confirm_asset(tx_asset_t *asset)$/;"	f
local_confirm_bond	bond.c	/^int local_confirm_bond(tx_bond_t *bond)$/;"	f
local_ident_shadow_generate	identity.c	/^static int local_ident_shadow_generate(tx_id_t *id)$/;"	f	file:
local_ident_shadow_verify	identity.c	/^static int local_ident_shadow_verify(tx_id_t *id)$/;"	f	file:
local_transid_generate	transaction.c	/^int local_transid_generate(int tx_op, tx_t *tx)$/;"	f
prep_init_tx	init.c	/^int prep_init_tx(tx_init_t *ini)$/;"	f
prep_net_tx	transaction.c	/^int prep_net_tx(tx_t *tx, tx_net_t *net, shkey_t *sink, size_t size)$/;"	f
prep_tx_file	file.c	/^static tx_file_t *prep_tx_file(tx_file_t *tx_file, int op_type, shfs_ino_t *inode, size_t data_of, size_t data_len)$/;"	f	file:
process_asset_tx	asset.c	/^int process_asset_tx(tx_app_t *cli, tx_asset_t *asset)$/;"	f
process_bond_tx	bond.c	/^int process_bond_tx(tx_app_t *cli, tx_bond_t *bond)$/;"	f
process_init_app_notify	init.c	/^void process_init_app_notify(shd_t *cli, tx_init_t *ini)$/;"	f
process_init_ledger_notify	init.c	/^void process_init_ledger_notify(shd_t *cli, tx_init_t *ini)$/;"	f
process_ledger_tx	ledger.c	/^int process_ledger_tx(tx_app_t *cli, tx_ledger_t *ledger)$/;"	f
propose_ledger	ledger.c	/^void propose_ledger(tx_ledger_t *led, tx_t *payload, size_t size)$/;"	f
remote_asset_notification	asset.c	/^int remote_asset_notification(shpeer_t *origin, tx_asset_t *tx)$/;"	f
remote_bond_notification	bond.c	/^int remote_bond_notification(shpeer_t *origin, tx_bond_t *tx)$/;"	f
remote_broadcast_asset	asset.c	/^int remote_broadcast_asset(shpeer_t *origin, tx_asset_t *asset)$/;"	f
remote_broadcast_bond	bond.c	/^int remote_broadcast_bond(shpeer_t *origin, tx_bond_t *bond)$/;"	f
remote_file_notification	file.c	/^int remote_file_notification(shpeer_t *origin, tx_file_t *tx)$/;"	f
remote_validate_asset	asset.c	/^int remote_validate_asset(tx_app_t *cli, tx_asset_t *asset)$/;"	f
remote_validate_bond	bond.c	/^int remote_validate_bond(tx_app_t *cli, tx_bond_t *bond)$/;"	f
save_asset	asset.c	/^void save_asset(tx_asset_t *asset)$/;"	f
save_bond	bond.c	/^void save_bond(tx_bond_t *bond)$/;"	f
sched_tx	schedule.c	/^void sched_tx(void *data, size_t data_len)$/;"	f
sched_tx_payload	schedule.c	/^void sched_tx_payload(shkey_t *dest_key, void *data, size_t data_len, void *payload, size_t payload_len)$/;"	f
sched_tx_sink	schedule.c	/^void sched_tx_sink(shkey_t *dest_key, void *data, size_t data_len)$/;"	f
set_bond_state	bond.c	/^void set_bond_state(tx_bond_t *bond, int state)$/;"	f
set_tx_inode	file.c	/^static void set_tx_inode(tx_file_t *tx, SHFL *inode)$/;"	f	file:
sharedaemon_account	account.c	/^tx_account_t *sharedaemon_account(void)$/;"	f
tx_confirm	bits.c	/^int tx_confirm(shpeer_t *cli_peer, tx_t *tx)$/;"	f
tx_init	bits.c	/^int tx_init(shpeer_t *cli_peer, tx_t *tx, int tx_op)$/;"	f
tx_load	bits.c	/^void *tx_load(int tx_op, shkey_t *tx_key)$/;"	f
tx_recv	bits.c	/^int tx_recv(shpeer_t *cli_peer, tx_t *tx)$/;"	f
tx_save	bits.c	/^int tx_save(void *raw_tx)$/;"	f
tx_send	bits.c	/^int tx_send(shpeer_t *cli_peer, tx_t *tx)$/;"	f
tx_sign	signature.c	/^void tx_sign(tx_t *tx, shkey_t *tx_sig, shkey_t *context)$/;"	f
tx_sign_confirm	signature.c	/^int tx_sign_confirm(tx_t *tx, shkey_t *tx_sig, shkey_t *context)$/;"	f
tx_sign_confirm_context	signature.c	/^void tx_sign_confirm_context(tx_t *tx, shkey_t *tx_sig, void *data, size_t data_len)$/;"	f
tx_sign_context	signature.c	/^void tx_sign_context(tx_t *tx, shkey_t *tx_sig, void *data, size_t data_len)$/;"	f
tx_wrap	bits.c	/^void tx_wrap(shpeer_t *cli_peer, tx_t *tx)$/;"	f
txclock_recv_sync	clock.c	/^void txclock_recv_sync(shd_t *cli, tx_clock_t *clock)$/;"	f
txeval_context_confirm	eval.c	/^int txeval_context_confirm(tx_eval_t *eval, tx_context_t *ctx)$/;"	f
txeval_context_sign	eval.c	/^void txeval_context_sign(tx_eval_t *eval, tx_context_t *ctx)$/;"	f
txfile_notify_segments	file.c	/^int txfile_notify_segments(shpeer_t *origin, tx_file_t *tx, SHFL *inode)$/;"	f
txfile_recv_write	file.c	/^int txfile_recv_write(shpeer_t *origin, tx_file_t *tx)$/;"	f
txfile_send_read	file.c	/^int txfile_send_read(shpeer_t *origin, $/;"	f
txfile_send_sync	file.c	/^int txfile_send_sync(shpeer_t *origin, tx_file_t *tx, shfs_ino_t *inode)$/;"	f
txfile_send_write	file.c	/^int txfile_send_write(shpeer_t *origin, tx_file_t *tx)$/;"	f
txfile_sync_verify	file.c	/^static int txfile_sync_verify(tx_file_t *file)$/;"	f	file:
txop_account_confirm	account.c	/^int txop_account_confirm(shpeer_t *cli_peer, tx_account_t *acc)$/;"	f
txop_account_init	account.c	/^int txop_account_init(shpeer_t *cli_peer, tx_account_t *acc)$/;"	f
txop_account_recv	account.c	/^int txop_account_recv(shpeer_t *cli_peer, tx_account_t *acc)$/;"	f
txop_account_send	account.c	/^int txop_account_send(shpeer_t *cli_peer, tx_account_t *acc)$/;"	f
txop_app_confirm	app.c	/^int txop_app_confirm(shpeer_t *cli_peer, tx_app_t *app)$/;"	f
txop_app_init	app.c	/^int txop_app_init(shpeer_t *cli_peer, tx_app_t *app)$/;"	f
txop_app_recv	app.c	/^int txop_app_recv(shpeer_t *cli_peer, tx_app_t *app)$/;"	f
txop_app_send	app.c	/^int txop_app_send(shpeer_t *cli_peer, tx_app_t *app)$/;"	f
txop_asset_confirm	asset.c	/^int txop_asset_confirm(shpeer_t *cli_peer, tx_asset_t *asset)$/;"	f
txop_asset_init	asset.c	/^int txop_asset_init(shpeer_t *cli_peer, tx_asset_t *asset)$/;"	f
txop_bond_confirm	bond.c	/^int txop_bond_confirm(shpeer_t *cli_peer, tx_bond_t *bond)$/;"	f
txop_bond_init	bond.c	/^int txop_bond_init(shpeer_t *cli_peer, tx_bond_t *bond)$/;"	f
txop_bond_recv	bond.c	/^int txop_bond_recv(shpeer_t *cli_peer, tx_bond_t *bond)$/;"	f
txop_bond_send	bond.c	/^int txop_bond_send(shpeer_t *cli_peer, tx_bond_t *bond)$/;"	f
txop_clock_confirm	clock.c	/^int txop_clock_confirm(shpeer_t *peer, tx_clock_t *clock)$/;"	f
txop_clock_init	clock.c	/^int txop_clock_init(shpeer_t *cli_peer, tx_clock_t *clock)$/;"	f
txop_clock_recv	clock.c	/^int txop_clock_recv(shpeer_t *peer, tx_clock_t *clock)$/;"	f
txop_clock_send	clock.c	/^int txop_clock_send(shpeer_t *peer, tx_clock_t *clock)$/;"	f
txop_context_confirm	context.c	/^int txop_context_confirm(shpeer_t *cli_peer, tx_context_t *ctx)$/;"	f
txop_context_init	context.c	/^int txop_context_init(shpeer_t *cli_peer, tx_context_t *ctx)$/;"	f
txop_context_recv	context.c	/^int txop_context_recv(shpeer_t *cli_peer, tx_context_t *ctx)$/;"	f
txop_context_send	context.c	/^int txop_context_send(shpeer_t *cli_peer, tx_context_t *ctx)$/;"	f
txop_context_wrap	context.c	/^int txop_context_wrap(shpeer_t *cli_peer, tx_context_t *ctx)$/;"	f
txop_contract_confirm	contract.c	/^int txop_contract_confirm(shpeer_t *peer, tx_contract_t *contract)$/;"	f
txop_contract_init	contract.c	/^int txop_contract_init(shpeer_t *cli_peer, tx_contract_t *contract)$/;"	f
txop_contract_recv	contract.c	/^int txop_contract_recv(shpeer_t *peer, tx_contract_t *contract)$/;"	f
txop_contract_send	contract.c	/^int txop_contract_send(shpeer_t *peer, tx_contract_t *contract)$/;"	f
txop_eval_confirm	eval.c	/^int txop_eval_confirm(shpeer_t *peer, tx_eval_t *eval)$/;"	f
txop_eval_init	eval.c	/^int txop_eval_init(shpeer_t *cli_peer, tx_eval_t *eval)$/;"	f
txop_eval_recv	eval.c	/^int txop_eval_recv(shpeer_t *peer, tx_eval_t *eval)$/;"	f
txop_eval_send	eval.c	/^int txop_eval_send(shpeer_t *peer, tx_eval_t *eval)$/;"	f
txop_event_confirm	event.c	/^int txop_event_confirm(shpeer_t *cli_peer, tx_event_t *event)$/;"	f
txop_event_init	event.c	/^int txop_event_init(shpeer_t *cli_peer, tx_event_t *event)$/;"	f
txop_event_recv	event.c	/^int txop_event_recv(shpeer_t *cli_peer, tx_event_t *event)$/;"	f
txop_event_send	event.c	/^int txop_event_send(shpeer_t *cli_peer, tx_event_t *event)$/;"	f
txop_file_confirm	file.c	/^int txop_file_confirm(shpeer_t *cli, tx_file_t *file)$/;"	f
txop_file_init	file.c	/^int txop_file_init(shpeer_t *cli, tx_file_t *file)$/;"	f
txop_file_recv	file.c	/^int txop_file_recv(shpeer_t *cli, tx_file_t *file)$/;"	f
txop_file_send	file.c	/^int txop_file_send(shpeer_t *cli, tx_file_t *file)$/;"	f
txop_ident_confirm	identity.c	/^int txop_ident_confirm(shpeer_t *cli_peer, tx_id_t *id, tx_id_t *ent)$/;"	f
txop_ident_init	identity.c	/^int txop_ident_init(shpeer_t *cli_peer, tx_id_t *id)$/;"	f
txop_ident_recv	identity.c	/^int txop_ident_recv(shpeer_t *cli_peer, tx_id_t *id)$/;"	f
txop_ident_send	identity.c	/^int txop_ident_send(shpeer_t *cli_peer, tx_id_t *id, tx_id_t *ent)$/;"	f
txop_init_confirm	init.c	/^int txop_init_confirm(shpeer_t *cli_peer, tx_init_t *ini)$/;"	f
txop_init_init	init.c	/^int txop_init_init(shpeer_t *cli_peer, tx_init_t *ini)$/;"	f
txop_init_recv	init.c	/^int txop_init_recv(shpeer_t *cli_peer, tx_init_t *ini)$/;"	f
txop_init_send	init.c	/^int txop_init_send(shpeer_t *cli_peer, tx_init_t *ini)$/;"	f
txop_lic_confirm	license.c	/^int txop_lic_confirm(shpeer_t *cli_peer, tx_license_t *lic)$/;"	f
txop_lic_init	license.c	/^int txop_lic_init(shpeer_t *cli_peer, tx_license_t *lic)$/;"	f
txop_lic_recv	license.c	/^int txop_lic_recv(shpeer_t *cli_peer, tx_license_t *lic)$/;"	f
txop_lic_send	license.c	/^int txop_lic_send(shpeer_t *cli_peer, tx_license_t *lic)$/;"	f
txop_metric_confirm	metric.c	/^int txop_metric_confirm(shpeer_t *cli_peer, tx_metric_t *met)$/;"	f
txop_metric_init	metric.c	/^int txop_metric_init(shpeer_t *cli_peer, tx_metric_t *met)$/;"	f
txop_metric_recv	metric.c	/^int txop_metric_recv(shpeer_t *cli_peer, tx_metric_t *met)$/;"	f
txop_metric_send	metric.c	/^int txop_metric_send(shpeer_t *cli_peer, tx_metric_t *met)$/;"	f
txop_ref_confirm	reference.c	/^int txop_ref_confirm(shpeer_t *peer, tx_ref_t *ref)$/;"	f
txop_ref_init	reference.c	/^int txop_ref_init(shpeer_t *cli_peer, tx_ref_t *ref)$/;"	f
txop_ref_recv	reference.c	/^int txop_ref_recv(shpeer_t *peer, tx_ref_t *ref)$/;"	f
txop_ref_send	reference.c	/^int txop_ref_send(shpeer_t *peer, tx_ref_t *ref)$/;"	f
txop_ref_wrap	reference.c	/^int txop_ref_wrap(shpeer_t *peer, tx_ref_t *ref)$/;"	f
txop_run_confirm	run.c	/^int txop_run_confirm(shpeer_t *cli_peer, tx_run_t *th)$/;"	f
txop_run_init	run.c	/^int txop_run_init(shpeer_t *cli_peer, tx_run_t *th)$/;"	f
txop_run_recv	run.c	/^int txop_run_recv(shpeer_t *cli_peer, tx_run_t *th)$/;"	f
txop_run_send	run.c	/^int txop_run_send(shpeer_t *cli_peer, tx_run_t *th)$/;"	f
txop_session_confirm	session.c	/^int txop_session_confirm(shpeer_t *cli_peer, tx_session_t *sess)$/;"	f
txop_session_init	session.c	/^int txop_session_init(shpeer_t *cli_peer, tx_session_t *sess)$/;"	f
txop_session_recv	session.c	/^int txop_session_recv(shpeer_t *cli_peer, tx_session_t *sess)$/;"	f
txop_session_send	session.c	/^int txop_session_send(shpeer_t *cli_peer, tx_session_t *sess)$/;"	f
txop_sub_confirm	subscribe.c	/^int txop_sub_confirm(shpeer_t *cli_peer, tx_subscribe_t *sub)$/;"	f
txop_sub_init	subscribe.c	/^int txop_sub_init(shpeer_t *cli_peer, tx_subscribe_t *sub)$/;"	f
txop_sub_recv	subscribe.c	/^int txop_sub_recv(shpeer_t *cli_peer, tx_subscribe_t *sub)$/;"	f
txop_sub_recv_listen	subscribe.c	/^int txop_sub_recv_listen(shpeer_t *cli_peer, tx_subscribe_t *sub)$/;"	f
txop_sub_wrap	subscribe.c	/^int txop_sub_wrap(shpeer_t *cli_peer, tx_subscribe_t *sub)$/;"	f
txop_trust_confirm	trust.c	/^int txop_trust_confirm(shpeer_t *cli_peer, tx_trust_t *trust)$/;"	f
txop_trust_init	trust.c	/^int txop_trust_init(shpeer_t *cli_peer, tx_trust_t *trust)$/;"	f
txop_trust_recv	trust.c	/^int txop_trust_recv(shpeer_t *cli_peer, tx_trust_t *trust)$/;"	f
txop_vm_confirm	vm.c	/^int txop_vm_confirm(shpeer_t *cli_peer, tx_vm_t *th)$/;"	f
txop_vm_init	vm.c	/^int txop_vm_init(shpeer_t *cli_peer, tx_vm_t *th)$/;"	f
txop_vm_recv	vm.c	/^int txop_vm_recv(shpeer_t *cli_peer, tx_vm_t *th)$/;"	f
txop_vm_send	vm.c	/^int txop_vm_send(shpeer_t *cli_peer, tx_vm_t *th)$/;"	f
txop_wallet_confirm	wallet.c	/^int txop_wallet_confirm(shpeer_t *peer, tx_wallet_t *wallet)$/;"	f
txop_wallet_init	wallet.c	/^int txop_wallet_init(shpeer_t *cli_peer, tx_wallet_t *wallet)$/;"	f
txop_wallet_recv	wallet.c	/^int txop_wallet_recv(shpeer_t *peer, tx_wallet_t *wallet)$/;"	f
txop_wallet_send	wallet.c	/^int txop_wallet_send(shpeer_t *peer, tx_wallet_t *wallet)$/;"	f
txop_ward_confirm	ward.c	/^int txop_ward_confirm(shpeer_t *peer, tx_ward_t *ward)$/;"	f
txop_ward_init	ward.c	/^int txop_ward_init(shpeer_t *cli_peer, tx_ward_t *ward)$/;"	f
txop_ward_recv	ward.c	/^int txop_ward_recv(shpeer_t *peer, tx_ward_t *ward)$/;"	f
txop_ward_send	ward.c	/^int txop_ward_send(shpeer_t *peer, tx_ward_t *ward)$/;"	f
txward_confirm	ward.c	/^int txward_confirm(tx_t *tx)$/;"	f
txward_context_confirm	ward.c	/^int txward_context_confirm(tx_ward_t *ward, tx_context_t *ctx)$/;"	f
txward_context_sign	ward.c	/^void txward_context_sign(tx_ward_t *ward, tx_context_t *ctx)$/;"	f
txward_init	ward.c	/^int txward_init(tx_t *tx)$/;"	f
unwrap_bytes	bits.c	/^void unwrap_bytes(void *data, size_t data_len)$/;"	f
update_tx_inode	file.c	/^static void update_tx_inode(tx_file_t *tx, SHFL *inode)$/;"	f	file:
validate_asset_signature	asset.c	/^static int validate_asset_signature(tx_asset_t *asset)$/;"	f	file:
validate_bond_signature	bond.c	/^static int validate_bond_signature(tx_bond_t *bond)$/;"	f	file:
verify_asset_signature	asset.c	/^int verify_asset_signature(tx_asset_t *asset, shpeer_t *peer)$/;"	f
wrap_bytes	bits.c	/^void wrap_bytes(void *data, size_t data_len)$/;"	f
