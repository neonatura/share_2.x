<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('share_php')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_share_php.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('share_php.so')) return;
    } else {
      if (!dl('share_php.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class share_php {
	static function test_main() {
		return test_main();
	}

	static function get_libshare_email() {
		return get_libshare_email();
	}

	static function get_libshare_version() {
		return get_libshare_version();
	}

	static function get_libshare_title() {
		return get_libshare_title();
	}

	static function get_libshare_path() {
		return get_libshare_path();
	}

	static function shcrc($data,$data_len) {
		return shcrc($data,$data_len);
	}

	static function shpeer() {
		return shpeer();
	}

	static function ashpeer() {
		return ashpeer();
	}

	static function shpeer_free($peer_p) {
		shpeer_free($peer_p);
	}

	static function shpref_free() {
		shpref_free();
	}

	static function shpref_get($pref,$default_value) {
		return shpref_get($pref,$default_value);
	}

	static function shpref_set($pref,$value) {
		return shpref_set($pref,$value);
	}

	static function shtime() {
		return shtime();
	}

	static function shctime($t) {
		return shctime($t);
	}

	static function shutime($t) {
		return shutime($t);
	}

	static function shtimeu($unix_t) {
		return shtimeu($unix_t);
	}

	static function shstrtime($t,$fmt) {
		return shstrtime($t,$fmt);
	}

	static function shmsgget($peer) {
		return shmsgget($peer);
	}

	static function shmsgsnd($msqid,$msgp,$msgsz) {
		return shmsgsnd($msqid,$msgp,$msgsz);
	}

	static function shmsgrcv($msqid,$msgp,$msgsz) {
		return shmsgrcv($msqid,$msgp,$msgsz);
	}

	static function shmsgctl($msg_qid,$cmd,$value) {
		return shmsgctl($msg_qid,$cmd,$value);
	}

	static function shfs_app_name($app_name) {
		return shfs_app_name($app_name);
	}

	static function shfs_crc($file) {
		return shfs_crc($file);
	}

	static function shfs_size($file) {
		return shfs_size($file);
	}

	static function shfs_init($peer) {
		return shfs_init($peer);
	}

	static function shfs_free($tree_p) {
		shfs_free($tree_p);
	}

	static function shfs_dir_base($tree) {
		return shfs_dir_base($tree);
	}

	static function shfs_dir_parent($inode) {
		return shfs_dir_parent($inode);
	}

	static function shfs_dir_entry($inode,$fname) {
		return shfs_dir_entry($inode,$fname);
	}

	static function shfs_dir_find($tree,$path) {
		return shfs_dir_find($tree,$path);
	}

	static function shfs_meta($tree,$ent,$val_p) {
		return shfs_meta($tree,$ent,$val_p);
	}

	static function shfs_meta_save($tree,$ent,$h) {
		return shfs_meta_save($tree,$ent,$h);
	}

	static function shfs_meta_get($file,$def) {
		return shfs_meta_get($file,$def);
	}

	static function shfs_meta_perm($file,$def,$user) {
		return shfs_meta_perm($file,$def,$user);
	}

	static function shfs_meta_set($file,$def,$value) {
		return shfs_meta_set($file,$def,$value);
	}

	static function shfs_sig_gen($file,$sig) {
		return shfs_sig_gen($file,$sig);
	}

	static function shfs_sig_get($file,$sig) {
		return shfs_sig_get($file,$sig);
	}

	static function shfs_sig_verify($file,$peer_key) {
		return shfs_sig_verify($file,$peer_key);
	}

	static function shfs_read_mem($path,$data_p,$data_len_p) {
		return shfs_read_mem($path,$data_p,$data_len_p);
	}

	static function shfs_write_mem($path,$data,$data_len) {
		return shfs_write_mem($path,$data,$data_len);
	}

	static function shfs_file_find($tree,$path) {
		return shfs_file_find($tree,$path);
	}

	static function shfs_file_pipe($file,$fd) {
		return shfs_file_pipe($file,$fd);
	}

	static function sherr($err_code,$log_str) {
		sherr($err_code,$log_str);
	}

	static function shwarn($log_str) {
		shwarn($log_str);
	}

	static function shinfo($log_str) {
		shinfo($log_str);
	}

	static function shnet_accept($sockfd) {
		return shnet_accept($sockfd);
	}

	static function shnet_bindsk($sockfd,$hostname,$port) {
		return shnet_bindsk($sockfd,$hostname,$port);
	}

	static function shnet_bind($sockfd,$addr,$addrlen) {
		return shnet_bind($sockfd,$addr,$addrlen);
	}

	static function shclose($sk) {
		return shclose($sk);
	}

	static function shnet_fcntl($fd,$cmd,$arg) {
		return shnet_fcntl($fd,$cmd,$arg);
	}

	static function shconnect_host($host,$port,$flags) {
		return shconnect_host($host,$port,$flags);
	}

	static function shnet_gethostbyname($name) {
		return shnet_gethostbyname($name);
	}

	static function shnet_peer($name) {
		return shnet_peer($name);
	}

	static function shnet_read($fd,$buf,$count) {
		return shnet_read($fd,$buf,$count);
	}

	static function shnet_sk() {
		return shnet_sk();
	}

	static function shnet_socket($domain,$type,$protocol) {
		return shnet_socket($domain,$type,$protocol);
	}

	static function shnet_host($sockfd) {
		return shnet_host($sockfd);
	}

	static function shnet_write($fd,$buf,$count) {
		return shnet_write($fd,$buf,$count);
	}

	static function shnet_verify($readfds,$writefds,$millis) {
		return shnet_verify($readfds,$writefds,$millis);
	}

	static function shnet_select($nfds,$readfds,$writefds,$exceptfds,$timeout) {
		return shnet_select($nfds,$readfds,$writefds,$exceptfds,$timeout);
	}

	static function shbuf_init() {
		return shbuf_init();
	}

	static function shbuf_catstr($buf,$data) {
		shbuf_catstr($buf,$data);
	}

	static function shbuf_cat($buf,$data,$data_len) {
		shbuf_cat($buf,$data,$data_len);
	}

	static function shbuf_size($buf) {
		return shbuf_size($buf);
	}

	static function shbuf_data($buf) {
		return shbuf_data($buf);
	}

	static function shbuf_clear($buf) {
		shbuf_clear($buf);
	}

	static function shbuf_trim($buf,$len) {
		shbuf_trim($buf,$len);
	}

	static function shbuf_free($buf_p) {
		shbuf_free($buf_p);
	}

	static function shbuf_grow($buf,$data_len) {
		return shbuf_grow($buf,$data_len);
	}

	static function shbuf_file($path) {
		return shbuf_file($path);
	}

	static function shbuf_growmap($buf,$data_len) {
		return shbuf_growmap($buf,$data_len);
	}

	static function shbuf_map($data,$data_len) {
		return shbuf_map($data,$data_len);
	}

	static function shkey_bin($data,$data_len) {
		return shkey_bin($data,$data_len);
	}

	static function shkey_str($kvalue) {
		return shkey_str($kvalue);
	}

	static function shkey_num($kvalue) {
		return shkey_num($kvalue);
	}

	static function shkey_uniq() {
		return shkey_uniq();
	}

	static function shkey_free($key_p) {
		shkey_free($key_p);
	}

	static function shkey_print($key) {
		return shkey_print($key);
	}

	static function ashkey_str($name) {
		return ashkey_str($name);
	}

	static function ashkey_num($num) {
		return ashkey_num($num);
	}

	static function shkey_cmp($key_1,$key_2) {
		return shkey_cmp($key_1,$key_2);
	}

	static function shkey_clone($key) {
		return shkey_clone($key);
	}

	static function shkey_cert($key,$crc,$stamp) {
		return shkey_cert($key,$crc,$stamp);
	}

	static function shkey_verify($sig,$crc,$key,$stamp) {
		return shkey_verify($sig,$crc,$key,$stamp);
	}

	static function shkey_gen($hex_str) {
		return shkey_gen($hex_str);
	}

	static function shpool_init() {
		return shpool_init();
	}

	static function shpool_size($pool) {
		return shpool_size($pool);
	}

	static function shpool_grow($pool) {
		shpool_grow($pool);
	}

	static function shpool_get($pool) {
		return shpool_get($pool);
	}

	static function shpool_get_index($pool,$index) {
		return shpool_get_index($pool,$index);
	}

	static function shpool_put($pool,$buff) {
		shpool_put($pool,$buff);
	}

	static function shpool_free($pool_p) {
		shpool_free($pool_p);
	}

	static function shmeta_init() {
		return shmeta_init();
	}

	static function shmeta_free($meta_p) {
		shmeta_free($meta_p);
	}

	static function shmeta_set($ht,$key,$val) {
		shmeta_set($ht,$key,$val);
	}

	static function shmeta_set_str($h,$key,$value) {
		shmeta_set_str($h,$key,$value);
	}

	static function shmeta_unset_str($h,$name) {
		shmeta_unset_str($h,$name);
	}

	static function shmeta_set_void($ht,$key,$data,$data_len) {
		shmeta_set_void($ht,$key,$data,$data_len);
	}

	static function shmeta_unset_void($h,$key) {
		shmeta_unset_void($h,$key);
	}

	static function shmeta_get_str($h,$key) {
		return shmeta_get_str($h,$key);
	}

	static function shmeta_get_void($h,$key) {
		return shmeta_get_void($h,$key);
	}

	static function shmeta_get($ht,$key) {
		return shmeta_get($ht,$key);
	}

	static function shmeta_print($h,$ret_buff) {
		shmeta_print($h,$ret_buff);
	}

	static function shbuf_append($from_buff,$to_buff) {
		shbuf_append($from_buff,$to_buff);
	}

	static function shbuf_clone($buff) {
		return shbuf_clone($buff);
	}

	static function shbuf_sprintf($buff,$fmt) {
		return shbuf_sprintf($buff,$fmt);
	}

	static function shmeta_count($ht) {
		return shmeta_count($ht);
	}

	static function shmeta_unset_ptr($h,$key) {
		shmeta_unset_ptr($h,$key);
	}

	static function shmeta_set_ptr($ht,$key,$ptr) {
		shmeta_set_ptr($ht,$key,$ptr);
	}

	static function shmeta_get_ptr($h,$key) {
		return shmeta_get_ptr($h,$key);
	}

	static function ashencode($data,$data_len_p,$key) {
		return ashencode($data,$data_len_p,$key);
	}

	static function shencode($data,$data_len,$data_p,$data_len_p,$key) {
		return shencode($data,$data_len,$data_p,$data_len_p,$key);
	}

	static function shencode_str($data) {
		return shencode_str($data);
	}

	static function ashdecode($data,$data_len_p,$key) {
		return ashdecode($data,$data_len_p,$key);
	}

	static function shdecode($data,$data_len,$data_p,$data_len_p,$key) {
		return shdecode($data,$data_len,$data_p,$data_len_p,$key);
	}

	static function shdecode_str($data,$key) {
		return shdecode_str($data,$key);
	}

	static function shlock_open($key,$flags) {
		return shlock_open($key,$flags);
	}

	static function shlock_tryopen($key,$flags,$lock_p) {
		return shlock_tryopen($key,$flags,$lock_p);
	}

	static function shlock_close($key) {
		return shlock_close($key);
	}

	static function sh_sha256($message,$len,$digest) {
		sh_sha256($message,$len,$digest);
	}

	static function shdigest($data,$len) {
		return shdigest($data,$len);
	}

	static function shjson_print($json) {
		return shjson_print($json);
	}

	static function shjson_str($json,$name,$def_str) {
		return shjson_str($json,$name,$def_str);
	}

	static function shjson_astr($json,$name,$def_str) {
		return shjson_astr($json,$name,$def_str);
	}

	static function shjson_str_add($tree,$name,$val) {
		return shjson_str_add($tree,$name,$val);
	}

	static function shjson_free($tree_p) {
		shjson_free($tree_p);
	}

	static function shjson_num($json,$name,$def_d) {
		return shjson_num($json,$name,$def_d);
	}

	static function shjson_num_add($tree,$name,$num) {
		return shjson_num_add($tree,$name,$num);
	}

	static function shjson_init($json_str) {
		return shjson_init($json_str);
	}

	static function shjson_array_add($tree,$name) {
		return shjson_array_add($tree,$name);
	}

	static function shjson_array_str($json,$name,$idx) {
		return shjson_array_str($json,$name,$idx);
	}

	static function shjson_array_astr($json,$name,$idx) {
		return shjson_array_astr($json,$name,$idx);
	}

	static function shjson_array_num($json,$name,$idx) {
		return shjson_array_num($json,$name,$idx);
	}

	static function shjson_obj($json,$name) {
		return shjson_obj($json,$name);
	}

	static function shjson_strlen($json,$name) {
		return shjson_strlen($json,$name);
	}
}

/* PHP Proxy Classes */

?>
