diff --git a/src/share-lib/fs/shfs_aux.c b/src/share-lib/fs/shfs_aux.c
index 81d7fe7..59d2413 100644
--- a/src/share-lib/fs/shfs_aux.c
+++ b/src/share-lib/fs/shfs_aux.c
@@ -368,6 +368,16 @@ int shfs_aux_pread(shfs_ino_t *inode, shbuf_t *ret_buff,
     b_len = MIN(SHFS_BLOCK_DATA_SIZE, data_len - b_of);
 
     if (!seek_of || b_of >= seek_of) {
+      if (seek_max && b_len > (seek_max - shbuf_size(ret_buff)))
+        b_len = seek_max - shbuf_size(ret_buff);
+#if 0
+      if (seek_max && ((b_of + b_len) > seek_max)) {
+        /* user is requesting less data than entire block */
+        b_len = MIN(b_len, seek_max - b_of);
+        fprintf(stderr, "DEBUG: shfs_aux_pread: limited read <%d bytes> per user seek_max(%d)\n", b_len, seek_max);  
+      }
+#endif
+
       /* full buffer read */
       shbuf_cat(ret_buff, (unsigned char *)blk.raw, b_len);
     } else if (seek_of && (b_of + b_len) >= seek_of) {
diff --git a/src/share-lib/fs/shfs_db.c b/src/share-lib/fs/shfs_db.c
index 4136280..94a130f 100644
--- a/src/share-lib/fs/shfs_db.c
+++ b/src/share-lib/fs/shfs_db.c
@@ -445,6 +445,7 @@ int shfs_db_read_of(shfs_ino_t *file, shbuf_t *buff, off_t of, size_t size)
     return (SHERR_NOENT);
 
   err = shfs_bin_read_of(db, buff, of, size);
+fprintf(stderr, "DEBUG: %d = shfs_bin_read_of(of %d, size %d)\n", err, of, size);
   if (err) {
     return (err);
   }
diff --git a/src/share-lib/fs/shfs_stream.c b/src/share-lib/fs/shfs_stream.c
index 6f685b4..bc12674 100644
--- a/src/share-lib/fs/shfs_stream.c
+++ b/src/share-lib/fs/shfs_stream.c
@@ -315,6 +315,7 @@ static int _shfs_stream_alloc(shfs_ino_buf_t *stream, size_t size)
   }
 
   if (tot_len >= stream->buff->data_max) {
+    /* allocate enough of file to perform I/O operation. */
     size_t block_size = sysconf(_SC_PAGE_SIZE);
     size_t alloc_len = ((tot_len / block_size) + 1) * block_size; /* mmap */
 
@@ -324,14 +325,17 @@ static int _shfs_stream_alloc(shfs_ino_buf_t *stream, size_t size)
       sherr(err, "shbuf_growmap");
       return (err);
     }
+fprintf(stderr, "DEBUG: grew buf by %d bytes [buff-max %d]\n", tot_len, stream->buff->data_max);
   }
 
   len = MIN(tot_len, stream->buff_max) - shbuf_size(stream->buff);
   if (len > 0) {
     /* read supplemental content to fullfill total length requested */
     of = shbuf_size(stream->buff);
+fprintf(stderr, "DEBUG: reading %d bytes @ %d offset into buf [buff-size %d, buff-max %d]\n", len, of, stream->buff->data_of, stream->buff->data_max);
     err = shfs_read_of(stream->file, stream->buff, of, len);
     if (err < 0 && err != SHERR_NOENT) {
+      sherr(err, "shfs_read_of");
       return (err);
     }
   }
