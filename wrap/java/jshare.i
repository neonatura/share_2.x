%module jshare
%{
/* header files andfunc decls */
#include "share.h"
%}
void test_main(void);
shbuf_t *shbuf_init(void);
void shbuf_catstr(shbuf_t *buf, char *data);
void shbuf_cat(shbuf_t *buf, void *data, size_t data_len);
size_t shbuf_size(shbuf_t *buf);
void shbuf_clear(shbuf_t *buf);
void shbuf_trim(shbuf_t *buf, size_t len);
void shbuf_free(shbuf_t **buf_p);
double shtime(void);
shtime_t shtime64(void);
uint64_t shcrc(void *data_p, int len);
shkey_t *shkey_bin(char *data, size_t data_len);
shkey_t *shkey_str(char *kvalue);
shkey_t *shkey_num(long kvalue);
shkey_t *shkey_uniq(void);
void shkey_free(shkey_t **key_p);
const char *shkey_print(shkey_t *key);
shkey_t *shkey_cert(shkey_t *key, uint64_t crc, shtime_t stamp);
int shkey_verify(shkey_t *sig, uint64_t crc, shkey_t *key, shtime_t stamp);
shkey_t *shkey_gen(char *hex_str);
shmeta_t *shmeta_init(void);
void shmeta_free(shmeta_t **meta_p);
void shmeta_set(shmeta_t *ht, shkey_t *key, const void *val);
void shmeta_set_str(shmeta_t *h, shkey_t *key, char *value);
void shmeta_unset_str(shmeta_t *h, shkey_t *name);
void shmeta_set_void(shmeta_t *ht, shkey_t *key, void *data, size_t data_len);
void shmeta_unset_void(shmeta_t *h, shkey_t *key);
char *shmeta_get_str(shmeta_t *h, shkey_t *key);
void *shmeta_get_void(shmeta_t *h, shkey_t *key);
void *shmeta_get(shmeta_t *ht, shkey_t *key);
void shmeta_print(shmeta_t *h, shbuf_t *ret_buff);
shlock_t *shlock_open(shkey_t *key, int flags);
int shlock_tryopen(shkey_t *key, int flags, shlock_t **lock_p);
int shlock_close(shkey_t *key);
int shencode(char *data, size_t data_len, uint8_t **data_p, uint32_t *data_len_p, shkey_t *key);
shkey_t *shencode_str(char *data);
int shdecode(uint8_t *data, uint32_t data_len, char **data_p, size_t *data_len_p, shkey_t *key);
int shdecode_str(char *data, shkey_t *key);
shkey_t *shkey_bin(char *data, size_t data_len);
shkey_t *shkey_str(char *kvalue);
shkey_t *shkey_num(long kvalue);
shkey_t *shkey_uniq(void);
void shkey_free(shkey_t **key_p);
const char *shkey_print(shkey_t *key);
int shkey_cmp(shkey_t *key_1, shkey_t *key_2);
shpool_t *shpool_init(void);
size_t shpool_size(shpool_t *pool);
void shpool_grow(shpool_t *pool);
shbuf_t *shpool_get(shpool_t *pool);
shbuf_t *shpool_get_index(shpool_t *pool, int index);
void shpool_put(shpool_t *pool, shbuf_t *buff);
void shpool_free(shpool_t **pool_p);
int shfs_sig_verify(shfs_ino_t *file, shkey_t *peer_key);
int shfs_sig_get(shfs_ino_t *file, shsig_t *sig);
int shfs_sig_gen(shfs_ino_t *file, shsig_t *sig);
int shmsgget(shpeer_t *peer);
int shmsgsnd(int msg_qid, void *msg_data, size_t msg_size, char *msg_type);
int shmsgrcv(int msg_qid, void *msg_data, size_t msg_size, char *msg_type, shkey_t *msg_src, int msg_flags);
int shmsgctl(int msg_qid, int cmd, int value);
int shnet_accept(int sockfd);
int shnet_bindsk(int sockfd, char *hostname, unsigned int port);
int shnet_bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int shnet_close(int sk);
int shnet_conn(int sk, char *host, unsigned short port, int async);
int shnet_fcntl(int fd, int cmd, long arg);
struct hostent *shnet_gethostbyname(char *name);
struct hostent *shnet_peer(char *name);
ssize_t shnet_read(int fd, const void *buf, size_t count);
int shnet_verify(fd_set *readfds, fd_set *writefds, long *millis);
int shnet_select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
int shnet_sk(void);
int shnet_socket(int domain, int type, int protocol);
ssize_t shnet_write(int fd, const void *buf, size_t count);
