
/*
 * @PACKAGE_NAME@ @PACKAGE_VERSION@ Copyright 2001 Neo Natura
 *
 * INET		An implementation of the TCP/IP protocol suite for the LINUX
 *		operating system.  INET is implemented using the  BSD Socket
 *		interface as the means of communication with the user level.
 *
 *    The Encoded Stream Protocol (ESTP).
 *
 *  This file is part of the Share Library.
 *  (https://github.com/neonatura/share)
 *        
 *  The Share Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version. 
 *
 *  The Share Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with The Share Library.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __SHESTP_H__
#define __SHESTP_H__

#include <linux/poll.h>
#include <linux/in.h>

#define SOL_ESTP   121
#ifndef IPPROTO_ESTP
#define IPPROTO_ESTP SOL_ESTP
#endif

#ifndef IPV4_MIN_MTU
#define IPV4_MIN_MTU 128 
#endif

typedef struct esphdr {
	__u32         stream_id;               /* Stream Identification    */         
	__u16         sport, dport;            /* Port Declaration         */

	/* State Configuration    */
	__u8          pm;                      /* packet mode.              */
	__u8          ver;                     /* version of packet mode.   */ 
	__u8          opt;                     /* esp packet options.       */
	__u8          enc_level;               /* encode mode level.        */

	/* Length Specification      */
	__u16         len;          

	__u16         check;                   /* Checksum Verification     */
	__u16         seq, del, asl, nsl;      /* Sequence Orientation      */
} esphdr; /* 24b */

/* ESTP Stream Error Codes */
enum {
	ESE_SUCCESS,                                                          /* 0 */
	ESE_UNKNOWN,
	ESE_RESERVED_2,
	ESE_RESERVED_3,
	ESE_RESERVED_4,
	ESE_RESERVED_5,
	ESE_RESERVED_6,
	ESE_RESERVED_7,
	ESE_RESERVED_8,
	ESE_RESERVED_9,
	ESE_RESERVED_10,                                                     /* 10 */
	ESE_RESERVED_11,
	ESE_RESERVED_12,
	ESE_INVALSIZEDATA, /* "Received packet with invalid size parameter" */
	ESE_RESERVED_14,
	ESE_TRUNCDATA,     /* "Received incomplete data packet"         */
	ESE_INVALPCKMODE,  /* "Received packet with an invalid processing mode." */
	ESE_INVALCRC,      /* "Received packet with a invalid CRC checksum" */
	ESE_INVALSEQ,      /* "Packet contained out of range sequence number" */
	ESE_RESERVED_19,
	ESE_RESERVED_20,                                                     /* 20 */
	ESE_INVALREQTYPE,  /* "Received request with an invalid type parameter." */
	ESE_INVALERRTYPE,  /* "Error packet included invalid parameters"         */
	ESE_INVALREQSIZE,  /* "Received request with an invalid size parameter." */ 
	ESE_INVALSTATEHS,  /* "Handshake packet sent to a invalid socket"            */
	ESE_INVALSTATEREQ, /* "Request received on stream in an invalid state"   */
	ESE_RESERVED_26,
	ESE_RESERVED_27,
	ESE_RESERVED_28,
	ESE_RESERVED_29,
	ESE_RESERVED_30,                                                     /* 30 */
	ESE_INVALSTATEDATA,/* "Data received on stream in an invalid state" */
	ESE_INVALPROTODATA,/* "Data received via an invalid protocol" */
	ESE_RESERVED_33,
	ESE_RESERVED_34, 
	ESE_RESERVED_35,
	ESE_RESERVED_36,
	ESE_INVALSIZEHS, /* "Handshake received with an invalid packet length" */
	ESE_INVALSIZEREQ,
	ESE_INVALSIZEERR,
	ESE_RESERVED_40,                                                     /* 40 */
	ESE_INVALSIZEPROBE,   /* "Received probe with an invalid length" */
	ESE_RETRANTIMEOUT,    /* "Retransmission timeout" */
	ESE_RESERVED_43,
	ESE_RESERVED_44,
	ESE_RESERVED_45,
	ESE_INVALDEL,
	ESE_RESERVED_47,
	ESE_RESERVED_48,
	ESE_RESERVED_49,
	ESE_RESERVED_50,                                                     /* 50 */
	ESE_INSUFMEMORY,   /* "Insufficient memory to process data." */   
	ESE_RESERVED_52,
	ESE_RESERVED_53,
	ESE_RESERVED_54,
	ESE_RESERVED_55,
	ESE_RESERVED_56,
	ESE_RESERVED_57,
	ESE_RESERVED_58,
	ESE_RESERVED_59,
	ESE_RESERVED_60,
	ESE_RESERVED_61,
	ESE_RESERVED_62,
	ESE_RESERVED_63,
	ESE_RESERVED_64,
	ESE_RESERVED_65,
	ESE_RESERVED_66,
	ESE_RESERVED_67,
	ESE_RESERVED_68,
	ESE_RESERVED_69,
	ESE_RESERVED_70,
	ESTP_MAX_ERROR_CODES=100
};




#ifndef __KERNEL__

#define ESTP_ERROR_STRING_BUFFER        1024
#define ESTP_REMOTE_ERROR_STRING        "at remote endpoint"
#define ESTP_MAX_VERSION_STRING_LENGTH  8

static const char *esp_error_string[] = {
	"Success", /* 0 */
	"A unknown error has occurred",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"", /* 10 */
	"Unsupported error code", 
	"Unsupported error code", 
	"Received a data packet with an invalid size parameter",
	"Unsupported error code", 
	"Received truncated data packet",
	"Unsupported error code",
	"An invalid type of packet was received",
	"Packet received with corrupted data",
	"Received packet with an invalid crc checksum",
	"Received a packet with an out of range sequence number",
	"Unsupported error code",
	"", /* 20 */
	"Received request with an invalid type parameter",
	"Error packet included invalid parameters",
	"Received request with an invalid size parameter",
	"An invalid socket received a handshake packet",
	"Request received on stream in an invalid state",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"", /* 30 */
	"Data received on a stream with an invalid state",
	"Data received via an invalid protocol",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"An invalid sized handshake packet was received",
	"Request packet received with an invalid length",
	"An error packet with an invalid size was received",
	"", /* 40 */
	"Received probe with an invalid length",
	"Packet retransmit timeout",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Data packet received with an invalid dictionary entry length",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"", /* 50 */
	"Insufficient memory to process data.",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"", /* 60 */
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"", /* 70 */
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"", /* 80 */
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"", /* 90 */
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"Unsupported error code",
	"" /* 100 */
};

/*
 * Returns a string describing the ESTP stream error,
 * NULL if no error has occurred, or
 * "" if a error occurs calling getsockopt/setsockopt.
 */
static __inline__ const char *esp_errorstr(int sk)
{
	static char error_str[ESTP_ERROR_STRING_BUFFER];
	u_long lcl_error, rem_error;
	socklen_t sz;

	memset(error_str, 0, ESTP_ERROR_STRING_BUFFER);

	lcl_error = 0;
	sz = sizeof(lcl_error);
	if (0 != getsockopt(sk, SOL_ESTP, IPESTP_LOCAL_ERROR, &lcl_error, &sz))
		return (error_str);

	if (lcl_error) {
		if (lcl_error >= ESTP_MAX_ERROR_CODES)
			lcl_error = ESE_UNKNOWN;
		strncpy(error_str, esp_error_string[lcl_error], ESTP_ERROR_STRING_BUFFER);

		lcl_error = 0;
		setsockopt(sk, SOL_ESTP, IPESTP_LOCAL_ERROR, &lcl_error, sizeof(lcl_error));
		
		return ((const char *)error_str);
	}

	rem_error = 0;
	sz = sizeof(rem_error);
	if (0 != getsockopt(sk, SOL_ESTP, IPESTP_REMOTE_ERROR, &rem_error, &sz))
		return (error_str);

	if (!rem_error)
		return (NULL);

	if (rem_error >= ESTP_MAX_ERROR_CODES)
		rem_error = ESE_UNKNOWN;
	if (strlen(esp_error_string[rem_error]) + strlen(ESTP_REMOTE_ERROR_STRING) + 2 > ESTP_ERROR_STRING_BUFFER)
		return (NULL); /* buffer overflow */
	sprintf(error_str, "%s %s", 
			esp_error_string[rem_error], ESTP_REMOTE_ERROR_STRING);

	rem_error = 0;
	setsockopt(sk, SOL_ESTP, IPESTP_REMOTE_ERROR, &rem_error, sizeof(rem_error));
	
	return ((const char *)error_str);
}

/*
 * Returns a string representing the major, minor,
 * and patch version of the ESTP protocol on the
 * current machine.
 */
static __inline__ const char *esp_versionstr(int sk)
{
	static char retbuf[ESTP_MAX_VERSION_STRING_LENGTH];
	char verbuf[16];
	socklen_t sz;
	u_long val;
	int i, l;
	int err;

	memset(retbuf, 0, ESTP_MAX_VERSION_STRING_LENGTH);

	val = 0;
	sz = sizeof(val);
	err = getsockopt(sk, SOL_ESTP, IPESTP_VERSION, &val, &sz);
	if (err)
		return ((const char *)retbuf);

	l = sprintf(verbuf, "%-3.3lu", val);
	for (i=0; i<l; i++) {
		if (i == (l-1)) {
			sprintf(retbuf+strlen(retbuf), "%c", verbuf[i] + 49); 
		} else if (verbuf[i] == '9') {
			sprintf(retbuf+strlen(retbuf), "%s10", i?".":"");
		} else {
			sprintf(retbuf+strlen(retbuf), "%s%c", i?".":"", verbuf[i] + 1);
		}
	}

	return ((const char *)retbuf);
}

#endif /* __KERNEL__ */







#define ESTP_VERSION 1

#define ESTP_HTABLE_SIZE             1024 
#define ESTP_DEFAULT_DICTSEG_LENGTH  4
#define ESTP_MIN_DICTSEG_LENGTH      3
#define ESTP_DICTMAP_SIZE            2
#define ESTP_QUEUE_FREQ              (HZ/10)
#define ESTP_DEF_VALUE               0xFE
#define ESTP_DEF_CHECK               __constant_htons(ESTP_DEF_VALUE)
#define ESTP_DEF_STREAM_ID           __constant_htonl(ESTP_DEF_VALUE)
#define ESTPUDP_DEF_CHECK            __constant_htons(0)
#define ESTP_MAX_DATA_SIZE           61440
#define ESTP_MAX_DATA_WINDOW         62914560
// #define ESTP_MAX_BACKLOG_SIZE        262144
// #define ESTP_MAX_SOFT_ERRORS         512 
#define ESTP_PACKET_BLOCK_SIZE       8 

/* default packets per burst (~100us) */
#define ESTP_DEF_PACKETS_PER_BURST   8 

/* maximum number of packets allowed per burst. */
#define ESTP_MAX_PACKETS_PER_BURST   1024

/* rate of packets incremented per "full" burst, when applicable. */
#define ESTP_INCR_BURST_RATE         1

/* setsockopt */
#define IPESTP_CHECKSUM        1 /* 0 = no checksum, 1 = packet checksum */
#define IPESTP_NETDEVICE       2 /* id # of network device stream uses */
#define IPESTP_GATEWAY         3 /* gateway route uses */
#define IPESTP_COMPRESS        4 /* default data mode for packets (ESTP_DATA) */
#define IPESTP_VERSION         5 /* the current verison of esp (non-settable) */
#define IPESTP_VERBOSE_DEBUG   6 /* extended information about esp operations */
#define IPESTP_MAXBPS          7 /* maximum bytes per second transmit speed. */
#define IPESTP_LOCAL_ERROR     8 /* last esp stream error (ESE_XXX) */
#define IPESTP_REMOTE_ERROR    9 /* last esp stream error at stream endpoint */




/* ESTP Packet Modes */
enum {
	ESTP_DATA,
	ESTP_HANDSHAKE, 
	ESTP_ERROR,
	ESTP_REQUEST,
	ESTP_PROBE,
	ESTP_PROBE_RETURN,
	ESTP_PACKET_MODES,
	ESTP_MAX_PACKET_MODES=200 /* modes 200 - 254 are RESERVED. */
};

/* ESTP Socket States */
enum {
	ESTP_ESTABLISHED = 1,
	ESTP_TCP_RESERVED__2,
	ESTP_TCP_RESERVED__3,
	ESTP_TCP_RESERVED__4,
	ESTP_TCP_RESERVED__5,
	ESTP_TCP_RESERVED__6,
	ESTP_CLOSE,
	ESTP_TCP_RESERVED__8,
	ESTP_TCP_RESERVED__9,
	ESTP_LISTEN,
	ESTP_CLOSE_WAIT,
	ESTP_CLOSE_ACK,
	ESTP_CONN_WAIT,
	ESTP_CONN_ACK,
	ESTP_SOCKET_STATES
};

/* ESTP Socket Options */
#define EOPT_RETRAN               (1 << 0)  /* retransmitted packet. */
#define EOPT_ACK_BLOCK            (1 << 1)  /* acknowledged packet block. */
#define EOPT_RESERVED_02          (1 << 2)
#define EOPT_RESERVED_03          (1 << 3)
#define EOPT_RESERVED_04          (1 << 4)
#define EOPT_RESERVED_05          (1 << 5)
#define EOPT_RESERVED_06          (1 << 6)
#define EOPT_RESERVED_07          (1 << 7)
/* * The following cannot be sent via (eh->opt) header variable. * */
#define EOPT_FAST_CHECKSUM        (1 << 8)  /* esp checksum (v1) */
#define EOPT_FAST_COMPRESS        (1 << 9)  /* esp compression (v1) */
#define EOPT_NONBLOCKING          (1 << 10) /* no blocking in processing. */

/* ESTP Error Types */
enum {
	E_UNKNOWN,
	E_QUEUE,      /* Packet Queue Error                            */
	E_LENGTH,     /* Packet Length Mismatch                        */
	E_ACCESS,     /* insufficient permission                       */
	E_STATE,      /* cannot handle data in current state           */
	E_CHECKSUM,   /* Packet Checksum Error                         */
	E_PARAM,      /* Invalid Packet Parameters                     */
	ESTP_ERROR_TYPES,
	ESTP_MAX_ERROR_TYPES=94
};

/* Esp Segment Flags */
#define ESF_SEGMENT (1 << 0)
#define ESF_MAP     (1 << 1)

#define ESTP_DICTSEGS(_seglen)        (ESTP_DICTBLOCK_SIZE/(_seglen))

#define EOPT_SET(_socket, _option) \
        (shesp_sk(_socket)->opt |= (_option))
#define EOPT_UNSET(_socket, _option) \
        (shesp_sk(_socket)->opt &= ~(_option))
#define EOPT_ISSET(_socket, _option) \
        (shesp_sk(_socket)->opt & (_option))

#if 0
#define esp_v4_skb_rcv_lookup(_skbuff)\
	esp_v4_rcv_lookup(\
			(_skbuff)->nh.iph->saddr, (_skbuff)->h.eh->sport,\
			(_skbuff)->nh.iph->daddr, (_skbuff)->h.eh->dport,\
			(_skbuff)->dev->ifindex,  (_skbuff)->h.eh->stream_id)

#define espudp_v4_skb_rcv_lookup(_skbuff)\
	espudp_v4_rcv_lookup(\
			(_skbuff)->nh.iph->saddr, (_skbuff)->h.uh->source,\
			(_skbuff)->nh.iph->daddr, (_skbuff)->h.uh->dest,\
			(_skbuff)->dev->ifindex,  ESTP_DEF_STREAM_ID)

#define esp_v4_skb_proxy_lookup(_skbuff)\
	esp_v4_proxy_lookup(\
			(_skbuff)->h.eh->dport,\
			(_skbuff)->nh.iph->saddr, (_skbuff)->h.eh->sport,\
			(_skbuff)->nh.iph->daddr, (_skbuff)->dev,\
			IPCB(_skbuff)->redirport, (_skbuff)->dev->ifindex,
			(_skbuff)->h.eh.stream_id)
#endif

/* esp_valid_size() */
#define esp_valid_size(_length, _version, _version_size, _max_size)\
	(((_version) >  ESTP_VERSION  &&  ((_length) < (_version_size)[ESTP_VERSION] || (_length) >= (_max_size))) ||\
	 ((_version) <= ESTP_VERSION  &&  (_length) != (_version_size)[(_version)]) ?\
	 -EINVAL : 0)

#define ESTP_DEC_MSL(_sock) \
    ((shesp_sk(_sock)->msl = max(IPV4_MIN_MTU, \
                                 shesp_sk(_sock)->msl - \
                                 shesp_sk(_sock)->st)))
#define ESTP_INC_MSL(_sock) \
    ((shesp_sk(_sock)->msl = min(ESTP_MAX_DATA_SIZE, \
                                 shesp_sk(_sock)->msl + \
                                 shesp_sk(_sock)->st)))

#define ESTP_STATE_STRING(_state) \
	((_state) == ESTP_CLOSE         ? "CLOSE"       : \
	 (_state) == ESTP_CLOSE_WAIT    ? "CLOSE_WAIT"  : \
	 (_state) == ESTP_CLOSE_ACK     ? "CLOSE_ACK"   : \
	 (_state) == ESTP_LISTEN        ? "LISTEN"      : \
	 (_state) == ESTP_CONN_WAIT     ? "CONN_WAIT"   : \
	 (_state) == ESTP_CONN_ACK      ? "CONN_ACK"    : \
	 (_state) == ESTP_ESTABLISHED   ? "ESTABLISHED" : \
	 (_state) <  ESTP_SOCKET_STATES ? "OTHER"       : \
	 "ILLEGAL")

#define IPTOS_STRING(_tos) \
	(((_tos) == 0)                ? "NONE"        : \
	 ((_tos) & IPTOS_LOWDELAY)    ? "LOWDELAY"    : \
	 ((_tos) & IPTOS_THROUGHPUT)  ? "THROUGHPUT"  : \
	 ((_tos) & IPTOS_RELIABILITY) ? "RELIABILITY" : \
	 ((_tos) & IPTOS_MINCOST)     ? "MINCOST"     : "OTHER")

#define ESTP_SKADDR(_sk) \
	NIPQUAD(inet_sk(_sk)->rcv_saddr), (int)ntohs(inet_sk(_sk)->sport), \
	NIPQUAD(inet_sk(_sk)->daddr),     (int)ntohs(inet_sk(_sk)->dport)

#define ESTP_STATS(_sk) \
	((_sk)->sk_family == PF_INET ? \
  (struct esp_mib *)&esp4_statistics : \
  (struct esp_mib *)&esp6_statistics)

/* Force NETDEBUG on if CONFIG_ESTP_DEBUG is defined. */
#undef NETDEBUG
#define NETDEBUG(x) do { x; } while (0)
#define ESTPDEBUG(x) do { x; } while (0)

#if defined(RHEL_RELEASE_CODE) && RHEL_RELEASE_CODE <= 1541
#define shesp_ip_opt(sk) \
  inet_sk(sk)->opt
#define sk_add_backlog __sk_add_backlog
#else
#define shesp_ip_opt(sk) \
  inet_sk(sk)->inet_opt
#endif


typedef struct esp_error_p {
        __u32 err_type;
        __u32 err_code;
				__u32 err_sys;
        __u32 state;
				struct esphdr eh;
} esp_error_p; /* 40b */

typedef struct esp_handshake_p {
        __u32 ip4_tos;
        __u32 esp_opt;
        __u32 dictseg_len; /* <= 255 (v1.1b) */
				__u32 locked_msw;
				__u32 ttl; /* <= 255 (v1.1b) */
				__u32 stream_id;
} esp_handshake_p; /* 24b */

enum { /* esp request types */
	EREQ_UNKNOWN,
	EREQ_SOCKET_CREATE,
	EREQ_SOCKET_CLOSE,
	EREQ_SOCKET_BPS,
	EREQ_SOCKET_OPEN,
	EREQ_PACKET,
	EREQ_SOCKET_PORT,
	ESTP_REQUEST_TYPES,
	ESTP_MAX_REQUEST_TYPES=200
};

typedef struct esp_request_p {
	__u32 req_type;
	__u32 req_opt1;
	struct esphdr eh;
} esp_request_p; /* 32b */

/* ESTP Packet Mode: ESTP_ROUTE */
typedef struct esp_route_p {

#define ERF_RETURN (1 << 0)
	__u32             flg;              /* ESTP Route Flags (ERF_XXX)       */

#define ERH_SOURCE 0
#define ERH_DEST   25 
	struct esp_route_host {
		struct in_addr  rh_addr;          /* Route Host IPv4 Address         */ 
		__u32           rh_tos;           /* Route Host IPv4 Type-Of-Service */

		struct esp_route_dest {
			__u8          rh_link;          /* Next Route Host                 */
			__u8          rh_ttl;           /* Time To Live                    */
			__u32         rh_stamp;         /* Route Host Time Stamp           */
			__u32         rh_mtu;           /* Maximum Transmission Unit       */
		} dest;

	} host[26];

} esp_route_p;

/* ESTP Packet Mode: ESTP_PROBE */
typedef struct esp_probe_p {
	__u32 length;
	__u32 rcv_length;
} esp_probe_p; /* 8b */

#if 0
typedef struct esp_accept_head {
	struct esp_accept_node   *list;
	struct sock              *lsk;
} esp_accept_head;
typedef struct esp_accept_node {
	union {
		esp_accept_head        *head_ptr;
		esp_accept_head        head_raw;
	} head;
	struct sock              *sock;
	struct esp_accept_node   *next;
	struct esp_accept_node   *prev;
} esp_accept_node;
#endif

struct esp_dict_map {
	u_char    c_id;
	u_char    seg_nr;
};
typedef struct esp_dict_hash {
	u_char    *seg[256];
	u_char    seg_idx[256];
} esp_dict_hash;

#if 0
struct espq_dict {

	int mode;
#define EQD_HASH 0
#define EQD_MAP  1
#define EQD_EXT  2

	u_int length;
	union {
		struct espq_dict_hash {
			u_char *seg;	
		} hash;
		struct espq_dict_map {
			u_char c_id;
			u_char seg_nr;
		} map;
		struct espq_dict_ext {
			u_char *data;
		} ext;
	} dict;
};
#endif

typedef struct esp_queue_s {
	struct esphdr         eh;
	u_short               pm;        /* packet mode of queue data.             */
	u_char                *data_raw; /* raw shared data segment.               */
	u_long                data_len;  /* shared data segment length.            */
	u_char                *segflg;   /* dictionary segment bit-flags           */

	int                   msg_flags; /* MSG_XXX flags.                         */
	int                   esp_flags; /* EOPT_XXXX flags.                       */

	struct esp_queue_s    *next;     /* next queue in list.                    */
} esp_queue_s;

struct esp_remote_host {
	union {
		struct in_addr sin4;
		struct in6_addr sin6;
	} daddr;
	int users;

	u_long msw, sw;              /* Max. / Cur. Send Window (per sec).      */
	int msl, st;                 /* Max / current sent length.              */
	int psl;                     /* Penalty send length.                    */
	int dsl;                     /* Discovery send length.                  */

	time_t  r_trip_time[10];     /* Receive packet trip time.               */
	time_t  s_trip_time[10];     /* Send packet trip time.                  */
	int     doff_time[10];       /* Destination Offset time value.          */
	int     r_trip_idx;
	int     s_trip_idx;
	int     doff_idx;

	struct esp_remote_host *next, *prev;
};

struct esp_mib {
  int		EspInPackets,
        EspOutPackets,
        EspInDataPackets,
        EspOutDataPackets,
        EspInErrors,
        EspOutErrors,
        EspNoPorts,
        EspRetransmits;
};

extern struct sock *es_hash[ESTP_HTABLE_SIZE];

/* esp.c */
void shesp_hash_sock(struct sock *sk);
void shesp_unhash_sock(struct sock *sk);
extern void esp_rehash_sock(struct sock *sk);
extern void esp_close(struct sock *sk, long timeout);
int shesp_recvmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg, size_t len, int nonblock, int flags, int *addr_len);
int shesp_sendmsg(struct kiocb *iocb, struct socket *sk, struct msghdr *msg, size_t size);
extern int esp_rcv_skb(struct sock * sk, struct sk_buff *skb);
extern u_short esp_check(struct sock *sk, __u32 seed, u_char *data, size_t len);
extern int espsend(struct sock *sk, int pm, int level, void *optdata, struct sk_buff *skb);
extern int esp_rcv_handshake(struct sock *sk, struct sk_buff *skb);
extern int esp_create_accept_socket(struct sock *sk, struct sk_buff *skb);
extern struct sock *pull_accept_sock(struct sock *sk);
extern int create_accept_socket(struct sock *sk, struct sk_buff *skb);
extern int esp_rcv_error(struct sock *sk, struct sk_buff *skb);
extern int esp_attach_remote_host(struct sock *sk);
extern void esp_detach_remote_host(struct sock *sk);
extern int esp_rcv_data(struct sock *sk, struct sk_buff **skb_ptr);
extern int esp_rcv(struct sock *sk, struct sk_buff **skb_ptr, size_t len, int pm);
extern struct sock *esp_accept(struct sock *sk, int flags);
extern int esp_destroy_sock(struct sock *sk);
extern unsigned short esp_good_socknum(void);
extern int esp_set_state(struct sock *sk, int state);
extern size_t esp_packet_size(struct sock *sk, struct esp_queue_s *q);
extern int esp_error(struct sock *sk, struct sk_buff *skb, int err_type, int err_code);	
extern int esp_init_sock(struct sock *sk);
extern int esp_ioctl(struct sock *sk, int cmd, unsigned long arg);
extern int esp_probe_sendlen(struct sock *sk);
extern int kmalloc_queue(unsigned char *data, size_t len, struct esp_queue_s **queue);
extern void kfree_queue(struct esp_queue_s **que);
extern void esp_push_queue(struct esp_queue_s **head, struct esp_queue_s *new);
extern struct esp_queue_s *esp_pull_queue(struct sock *sk, struct esp_queue_s **head);
extern int esp_backlog_packet(struct sock *sk, u_char **pktdata, size_t pktdata_len, struct esphdr *eh, int msg_flags);
int esp_retransmit(struct sock *sk, struct sk_buff *skb, u_char pm, __u32 nbo_seq, __u32 nbo_asl);
extern int esp_listen_rcv(struct sock *sk, struct sk_buff **skb_ptr, int pm);
extern unsigned int esp_poll(struct file *file, struct socket *sock, poll_table *wait);
extern int esp_request(struct sock *sk, struct sk_buff *skb, int request, u_long value);
extern inline void esp_clear_timers(struct sock *sk);
int shesp_disconnect(struct sock *sk, int flags);


/* esp_v4.c */
extern struct esp_mib esp4_statistics;
extern struct esp_mib esp6_statistics;
extern int esp_v4_rcv(struct sk_buff *skb, unsigned short len);
extern void esp_v4_err(struct sk_buff *skb, unsigned char *dp, int len);
extern int esp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len);
extern int esp_v4_verify_bind(struct sock *sk, unsigned short snum);

#if 0
/* esp_v6.c */
extern int esp_v6_rcv_skb(struct sock *sk, struct sk_buff *skb);
extern int esp_v6_deliver(struct sock *sk, struct sk_buff *skb);
extern inline int esp_v6_deliver(struct sock *sk, struct sk_buff *skb);
extern void espv6_init(void);
extern struct proto espv6_prot;

/* espudp_ipv4.c */
extern int espudp_v4_rcv(struct sk_buff *skb, unsigned short len);
extern void espudp_v4_err(struct sk_buff *skb, unsigned char *dp, int len);
extern struct proto espudp_prot;

/* esptcp_v4.c */
extern void esptcp_v4_err(struct sk_buff *skb, unsigned char *dp, int len);
extern int esptcp_v4_rcv(struct sk_buff *skb, u_short len);
#endif

/* esp_dict.c */
extern int esp_encode_queue(struct sock *sk, struct esp_queue_s *q);
extern int esp_encode_packet(struct sock *sk, struct esp_queue_s **queue_ptr,
		ushort asl, u_char **retdata, ushort *retlen, ushort *retdel);
extern int esp_decode(struct sock *sk, u_char *data,      u_int len,      ushort del, u_char **retdata,  u_int *retlen);
extern inline int esp_dict_init_segs(struct sock *sk);
extern inline void esp_dict_free_segs(struct sock *sk);

/* esp_csum.c */
extern inline u_short esp_fast_csum(__u32 seed, char *data, int len);

/* CONFIG_IP_TRANSPARENT_PROXY */
extern int	esp_chkaddr(struct sk_buff *skb);





/* struct esp_error_p (ESTP_ERROR) */
static int esp_error_version_size[] = {
	0,    /* v1.1a (0) */
	40,   /* v1.1b (1) */
	-1
};
#define ESTP_MAX_ERROR_SIZE      128 

/* struct esp_probe_p (ESTP_PROBE) */
static int esp_probe_version_size[] = {
	0,		/* v1.1a (0) */
	8,    /* v1.1b (1) */
	-1
};
#define ESTP_MAX_PROBE_SIZE      128

/* struct esp_handshake_p (ESTP_HANDSHAKE) */ 
static int esp_handshake_version_size[] = {
	0,    /* v1.1a (0) */
	24,   /* v1.1b (1) */
	-1
};
#define ESTP_MAX_HANDSHAKE_SIZE  128

/* struct esp_request_p (ESTP_REQUEST) */ 
static int esp_request_version_size[] = {
	0,    /* v1.1a (0) */
	32,   /* v1.1b (1) */
	-1
};
#define ESTP_MAX_REQUEST_SIZE    128


static int esp_checksum_opt[] = {
	0,                       /* no esp checksum */
	EOPT_FAST_CHECKSUM,      /* esp checksum v1 */
	-1
};

static int esp_compress_opt[] = {
	0,                       /* no esp encode */
	EOPT_FAST_COMPRESS,      /* esp encode v1 */
	-1
};


struct shesp_sock {
  /* inet_sock has to be the first member */
  struct inet_sock inet;

  int    opt;                         /* ESTP Options (EOPT_XXXX)            */
  int    lcl_error;                   /* IPESTP_LOCAL_ERROR                  */
  int    rem_error;                   /* IPESTP_REMOVE_ERROR                 */
  int    msl, sl, st;                 /* max, cur., and thresh of send pkt. */
  u_long locked_msw;                  /* max sending window per sec (0=none)*/
  int    pck_per_burst;               /* max packets per data burst (flow?) */
  int    pck_loss_rate;               /* nr of packets lost "recently".     */

  __u16  s_seq[ESTP_PACKET_MODES];     /* packet sending SEQuence index      */
  __u16  r_seq[ESTP_PACKET_MODES];     /* packet receiving SEQuence index    */
  __u16  ns_seq[ESTP_PACKET_MODES];    /* next send SEQuence expected        */
  __u16  nr_seq[ESTP_PACKET_MODES];    /* next receiving SEQuence expected   */
  __u32  s_id, r_id;                  /* packet identification              */

  struct esp_queue_s     *r_overflow; /* ESTP Packet Receive Overflow Queue  */
  struct esp_queue_s     *s_queue;    /* ESTP Packet Send Queue              */
  u_short                r_noack_pck[ESTP_PACKET_MODES];
  struct esp_queue_s     *s_backlog[ESTP_PACKET_MODES];

  struct timer_list      timer;       /* ESTP Default Timer                  */
  struct timer_list      queue_timer; /* ESTP Queue Timer                    */

#if 0
  struct esp_accept_node accept_node; /* accept socket list node            */
#endif
  struct esp_remote_host *rem_host;   /* remote host                        */

  struct esp_dict_hash   *s_dict;     /* Send Segment Hash Table            */
  struct esp_dict_hash   *r_dict;     /* Receive Segment Hash Table         */
  int                    dictseg_len; /* Dictionary Segment Length          */

  union {
    struct sock            **queue;   /* listen socket's accept queue       */
    struct sock            *sock;     /* listen socket                      */
  } listen;

  struct esp_opt_probe_s {
    int timeout;                      /* sec. before next Probe             */
    int tinterval;                    /* sec. between Probes                */
    int len;                          /* sug. probe length                  */
  } probe;

  int done;
};


static inline struct shesp_sock *shesp_sk(const struct sock *sk)
{ 
  return (struct shesp_sock *)sk;
} 

static inline struct esphdr *shesp_hdr(struct sk_buff *skb)
{
  return (struct esphdr *)skb_transport_header(skb);
}


#endif
