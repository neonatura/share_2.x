.TH "The share library 'sharefs' file system." 3 "1 Jan 2015" "Version 2.18" "libshare" \" -*- nroff -*-
.ad l
.nh
.SH NAME
The share library 'sharefs' file system. \- 
.PP
The sharefs file system.  

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBshfs_idx_t\fP"
.br
.ti -1c
.RI "struct \fBshfs_block_access\fP"
.br
.ti -1c
.RI "struct \fBshfs_hdr_t\fP"
.br
.RI "\fIA sharefs filesystem inode header. \fP"
.ti -1c
.RI "struct \fBshfs_block_t\fP"
.br
.RI "\fIThe contents of a sharefs inode. \fP"
.ti -1c
.RI "struct \fBshfs_ino_buf\fP"
.br
.ti -1c
.RI "struct \fBshfs_ino_t\fP"
.br
.RI "\fIA sharefs filesystem inode. \fP"
.ti -1c
.RI "struct \fBshfs_t\fP"
.br
.RI "\fIThe sharefs filesystem structure. \fP"
.ti -1c
.RI "struct \fBshmsg_t\fP"
.br
.ti -1c
.RI "struct \fBshmsgq_t\fP"
.br
.ti -1c
.RI "struct \fBshfs_journal_t\fP"
.br
.RI "\fIA sharefs filesystem journal. \fP"
.ti -1c
.RI "struct \fBshsig_t\fP"
.br
.ti -1c
.RI "struct \fBshfs_dirent_t\fP"
.br
.ti -1c
.RI "struct \fBshfs_dir_t\fP"
.br
.in -1c
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBLibshare_fsattr\fP"
.br
.PP

.RI "\fIInode attributes. \fP"
.ti -1c
.RI "\fBLibshare_fszlib\fP"
.br
.PP

.RI "\fIlibshare filesystem inode compression I/O functionality \fP"
.ti -1c
.RI "\fBLibshare_fsbin\fP"
.br
.PP

.RI "\fIlibhshare filesystem inode binary I/O functionality. \fP"
.ti -1c
.RI "\fBLibshare_fsref\fP"
.br
.PP

.RI "\fIlibhshare filesystem inode refary I/O functionality. \fP"
.ti -1c
.RI "\fBLibshare_fsmem\fP"
.br
.PP

.RI "\fIlocal hard-disk memory I/O \fP"
.ti -1c
.RI "\fBLibshare_fsrev\fP"
.br
.PP

.RI "\fIrevision repository \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSHFS_LEVEL_PUBLIC\fP   0"
.br
.ti -1c
.RI "#define \fBSHFS_MAX_LEVELS\fP   1"
.br
.ti -1c
.RI "#define \fBNAME_MAX\fP   4095"
.br
.ti -1c
.RI "#define \fBPATH_MAX\fP   NAME_MAX"
.br
.ti -1c
.RI "#define \fBSHFS_OVERLAY\fP   (1 << 0)"
.br
.RI "\fIOverlay sharefs on top of current filesystem. \fP"
.ti -1c
.RI "#define \fBSHFS_TRACK\fP   (1 << 1)"
.br
.RI "\fITrack all revisions of file modifications. \fP"
.ti -1c
.RI "#define \fBSHFS_PRIVATE\fP   (1 << 2)"
.br
.RI "\fIA sharefs filesystem that is externally unaccessible beyond the scope of this application. \fP"
.ti -1c
.RI "#define \fBSHFS_SYNC\fP   (1 << 3)"
.br
.RI "\fIDisabling caching and asynchronous file operations. \fP"
.ti -1c
.RI "#define \fBSHFS_REMOTE\fP   (1 << 4)"
.br
.RI "\fIThe partition is located on a remote machine. \fP"
.ti -1c
.RI "#define \fBSHINODE_NULL\fP   0"
.br
.RI "\fIAn inode reference to nothing. \fP"
.ti -1c
.RI "#define \fBSHINODE_APP\fP   100"
.br
.RI "\fIInode is in reference to an application-specific directory. \fP"
.ti -1c
.RI "#define \fBSHINODE_PARTITION\fP   101"
.br
.RI "\fIInode is the root of an entire sharefs partition. \fP"
.ti -1c
.RI "#define \fBSHINODE_PEER\fP   102"
.br
.RI "\fIInode is a reference to a remote sharefs partition. \fP"
.ti -1c
.RI "#define \fBSHINODE_DELTA\fP   103"
.br
.RI "\fIInode is a reference to a binary delta revision. \fP"
.ti -1c
.RI "#define \fBSHINODE_ARCHIVE\fP   104"
.br
.RI "\fIAn archive of files and/or directories. \fP"
.ti -1c
.RI "#define \fBSHINODE_REFERENCE\fP   105"
.br
.RI "\fIA reference to another inode. \fP"
.ti -1c
.RI "#define \fBSHINODE_META\fP   106"
.br
.RI "\fIA meta definition hashmap (meta map). \fP"
.ti -1c
.RI "#define \fBSHINODE_DIRECTORY\fP   107"
.br
.RI "\fIA directory containing multiple file references. \fP"
.ti -1c
.RI "#define \fBSHINODE_AUX\fP   108"
.br
.RI "\fIAn auxillary unparseable data segment stored in the sharefs sub-system. \fP"
.ti -1c
.RI "#define \fBSHINODE_FILE\fP   109"
.br
.RI "\fIA generic reference to a path which contains further references to data. \fP"
.ti -1c
.RI "#define \fBSHINODE_BINARY\fP   110"
.br
.RI "\fIRaw binary data referenced by a. \fP"
.ti -1c
.RI "#define \fBSHINODE_REVISION\fP   111"
.br
.RI "\fIA reference to a particular version of a file. \fP"
.ti -1c
.RI "#define \fBSHINODE_COMPRESS\fP   112"
.br
.RI "\fIA zlib compressed binary segment. \fP"
.ti -1c
.RI "#define \fBSHINODE_CRYPT\fP   113"
.br
.RI "\fIA TEA encoded binary segment. \fP"
.ti -1c
.RI "#define \fBSHINODE_DATABASE\fP   114"
.br
.RI "\fIA reference to a sqlite database. \fP"
.ti -1c
.RI "#define \fBSHINODE_ACCESS\fP   115"
.br
.RI "\fIInode specific permissions based on credentials. \fP"
.ti -1c
.RI "#define \fBSHINODE_FILE_LOCK\fP   116"
.br
.RI "\fIInode specific access mutex. \fP"
.ti -1c
.RI "#define \fBSHINODE_LICENSE\fP   117"
.br
.ti -1c
.RI "#define \fBSHINODE_EXTERNAL\fP   118"
.br
.ti -1c
.RI "#define \fBIS_INODE_CONTAINER\fP(_type)"
.br
.ti -1c
.RI "#define \fBSHFS_MAX_BLOCK_SIZE\fP   2048"
.br
.RI "\fIThe maximum size a single block can contain. \fP"
.ti -1c
.RI "#define \fBSHFS_BLOCK_DATA_SIZE\fP   (SHFS_MAX_BLOCK_SIZE - sizeof(\fBshfs_hdr_t\fP))"
.br
.RI "\fIThe size of the data segment each inode contains. \fP"
.ti -1c
.RI "#define \fBSHFS_MAX_BLOCK\fP   57344"
.br
.RI "\fIThe maximum number of blocks in a sharefs journal. \fP"
.ti -1c
.RI "#define \fBSHFS_PATH_MAX\fP   (SHFS_BLOCK_DATA_SIZE - 34)"
.br
.RI "\fIThe maximum length of a sharefs file name. \fP"
.ti -1c
.RI "#define \fBSHFS_ATTR_BITS\fP   'abcdeflmorstuvwx'"
.br
.RI "\fIThe character tokens representing the inode attributes. \fP"
.ti -1c
.RI "#define \fBSHATTR_ARCH\fP   (1 << 0)"
.br
.RI "\fIIndicates the inode contains an SHINODE_ARCHIVE file containing stored directories and/or files. \fP"
.ti -1c
.RI "#define \fBSHATTR_BLOCK\fP   (1 << 1)"
.br
.RI "\fIIndicates the inode has a SHINODE_ACCESS ward blocking access. \fP"
.ti -1c
.RI "#define \fBSHATTR_COMP\fP   (1 << 2)"
.br
.RI "\fIIndicates the inode is storing compressed data. \fP"
.ti -1c
.RI "#define \fBSHATTR_DB\fP   (1 << 3)"
.br
.RI "\fIIndicates the inode is a database. \fP"
.ti -1c
.RI "#define \fBSHATTR_ENC\fP   (1 << 4)"
.br
.RI "\fIIndicates the inode is encrypted. \fP"
.ti -1c
.RI "#define \fBSHATTR_FLOCK\fP   (1 << 5)"
.br
.RI "\fIIndicates the inode has a SHINODE_ACCESS lock blocking access. \fP"
.ti -1c
.RI "#define \fBSHATTR_LINK\fP   (1 << 6)"
.br
.RI "\fIIndicates the inode is a SHINODE_REFERENCE to another inode. \fP"
.ti -1c
.RI "#define \fBSHATTR_META\fP   (1 << 7)"
.br
.RI "\fIThis inode has supplementatal SHINODE_META information. \fP"
.ti -1c
.RI "#define \fBSHATTR_OWNER\fP   (1 << 8)"
.br
.RI "\fIThis inode has specific owner access permissions. \fP"
.ti -1c
.RI "#define \fBSHATTR_READ\fP   (1 << 9)"
.br
.RI "\fIIndicates the inode has specific read permissions. \fP"
.ti -1c
.RI "#define \fBSHATTR_SYNC\fP   (1 << 10)"
.br
.RI "\fIIndicates the inode synchronizes with the share daemon. \fP"
.ti -1c
.RI "#define \fBSHATTR_TEMP\fP   (1 << 11)"
.br
.RI "\fIIndicates that inode is not persistent. \fP"
.ti -1c
.RI "#define \fBSHATTR_USER\fP   (1 << 12)"
.br
.RI "\fIThis inode has specific public access permissions. \fP"
.ti -1c
.RI "#define \fBSHATTR_VER\fP   (1 << 13)"
.br
.RI "\fIThis inode has multiple revision versions. \fP"
.ti -1c
.RI "#define \fBSHATTR_WRITE\fP   (1 << 14)"
.br
.RI "\fIThis inode has specific write permissions. \fP"
.ti -1c
.RI "#define \fBSHATTR_EXE\fP   (1 << 15)"
.br
.RI "\fIThis inode has specific execute permissions. \fP"
.ti -1c
.RI "#define \fBSHATTR_LINK_EXT\fP   (1 << 22)"
.br
.RI "\fIA SHINODE_EXTERNAL inode referencing a local-disk path. \fP"
.ti -1c
.RI "#define \fBHAS_SHACCESS_INODE\fP(_ino)"
.br
.ti -1c
.RI "#define \fBHAS_SHMETA_INODE\fP(_ino)"
.br
.ti -1c
.RI "#define \fBSHINODE_DEFAULT_ATTR_FORMAT\fP(_attr)"
.br
.RI "\fIThe default format for data contained by a SHINODE_FILE inode. \fP"
.ti -1c
.RI "#define \fBMAX_JOURNAL_CACHE_SIZE\fP   16"
.br
.RI "\fIA cache of open journals. \fP"
.ti -1c
.RI "#define \fBIPC_NOWAIT\fP   04000"
.br
.ti -1c
.RI "#define \fBMSG_EXCEPT\fP   020000"
.br
.ti -1c
.RI "#define \fBMSG_NOERROR\fP   010000"
.br
.RI "\fIno error if message is too big \fP"
.ti -1c
.RI "#define \fBMAX_MESSAGE_QUEUES\fP   512"
.br
.ti -1c
.RI "#define \fBMESSAGE_QUEUE_SIZE\fP   4096000"
.br
.ti -1c
.RI "#define \fBMAX_MESSAGES_PER_QUEUE\fP   2048"
.br
.ti -1c
.RI "#define \fBSHMSGF_RMID\fP   (1 << 0)"
.br
.RI "\fIremove a message queue's resources. \fP"
.ti -1c
.RI "#define \fBSHMSGF_OVERFLOW\fP   (1 << 1)"
.br
.RI "\fIdiscard stale messages when queue is full. \fP"
.ti -1c
.RI "#define \fBSHMSGF_ANONYMOUS\fP   (1 << 2)"
.br
.RI "\fIallow for receiving messages sent by one self. \fP"
.ti -1c
.RI "#define \fBSHMSGF_AUTH\fP   (1 << 4)"
.br
.RI "\fIunused \fP"
.ti -1c
.RI "#define \fBSHFS_MAX_JOURNAL\fP   57344"
.br
.RI "\fIThe number of journals a sharefs filesystem contains. \fP"
.ti -1c
.RI "#define \fBSHFS_MAX_JOURNAL_SIZE\fP   (SHFS_MAX_BLOCK * SHFS_MAX_BLOCK_SIZE)"
.br
.RI "\fIThe maximum number of bytes in a sharefs file-system journal. \fP"
.ti -1c
.RI "#define \fBSHMETA_READ\fP   'read'"
.br
.ti -1c
.RI "#define \fBSHMETA_WRITE\fP   'write'"
.br
.ti -1c
.RI "#define \fBSHMETA_EXEC\fP   'exec'"
.br
.ti -1c
.RI "#define \fBSHMETA_USER\fP   'user'"
.br
.RI "\fIThe read-access group assigned to the inode. \fP"
.ti -1c
.RI "#define \fBSHMETA_GROUP\fP   'group'"
.br
.ti -1c
.RI "#define \fBSHMETA_SIGNATURE\fP   'signature'"
.br
.RI "\fIA digital signature. \fP"
.ti -1c
.RI "#define \fBSHMETA_DESC\fP   'desc'"
.br
.RI "\fIA textual description of the inode. \fP"
.ti -1c
.RI "#define \fBBASE_SHMETA_PATH\fP   'meta'"
.br
.RI "\fIA directory prefix referencing file meta information. \fP"
.ti -1c
.RI "#define \fBshfs_meta_free\fP(_meta_p)   shmeta_free(_meta_p)"
.br
.RI "\fIFree an instance to a sharedfs meta definition hashmap. \fP"
.ti -1c
.RI "#define \fBSHFS_MAX_GROUPS\fP   57344"
.br
.ti -1c
.RI "#define \fBshfs_uid\fP(_inode, _flag)   (strtoll(shfs_meta_get((_inode), (_flag) | SHMETA_USER)))"
.br
.RI "\fIA 64bit user id associated with a read, write, or exec inode permission. \fP"
.ti -1c
.RI "#define \fBshfs_gid\fP(_inode)   (strtoll(shfs_meta_get((_inode), (_flag) | SHMETA_GROUP)))"
.br
.RI "\fIA 64bit group id associated with a read, write, or exec inode permission. \fP"
.ti -1c
.RI "#define \fBSHAPP_LOCAL\fP   (1 << 0)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBshfs_t\fP \fBshfs_t\fP"
.br
.RI "\fIA type defintion for the sharefs filesytem structure. \fP"
.ti -1c
.RI "typedef struct \fBshfs_ino_t\fP \fBshfs_ino_t\fP"
.br
.RI "\fIA sharefs filesystem inode. \fP"
.ti -1c
.RI "typedef __uint16_t \fBshfs_inode_off_t\fP"
.br
.RI "\fIA sharefs filesystem inode or journal reference. \fP"
.ti -1c
.RI "typedef __uint16_t \fBshfs_ino_type_t\fP"
.br
.RI "\fIA sharefs inode type definition. \fP"
.ti -1c
.RI "typedef __uint32_t \fBshfs_attr_t\fP"
.br
.RI "\fIA sharefs inode attribute definitions. \fP"
.ti -1c
.RI "typedef struct \fBshfs_idx_t\fP \fBshfs_idx_t\fP"
.br
.RI "\fIA sharefs filesystem inode position header. \fP"
.ti -1c
.RI "typedef struct \fBshfs_block_access\fP \fBshfs_block_access_t\fP"
.br
.ti -1c
.RI "typedef struct \fBshfs_hdr_t\fP \fBshfs_hdr_t\fP"
.br
.ti -1c
.RI "typedef struct \fBshfs_block_t\fP \fBshfs_block_t\fP"
.br
.ti -1c
.RI "typedef struct \fBshfs_t\fP \fBSHFS\fP"
.br
.RI "\fIA convienence macro for accessing a sharefs file partition. \fP"
.ti -1c
.RI "typedef struct \fBshfs_ino_t\fP \fBSHFL\fP"
.br
.RI "\fIA convienence macro for accessing a sharefs file node. \fP"
.ti -1c
.RI "typedef struct \fBshfs_ino_buf\fP \fBshfs_ino_buf_t\fP"
.br
.ti -1c
.RI "typedef struct \fBshmsg_t\fP \fBshmsg_t\fP"
.br
.ti -1c
.RI "typedef struct \fBshfs_dirent_t\fP \fBshfs_dirent_t\fP"
.br
.ti -1c
.RI "typedef struct \fBshfs_dir_t\fP \fBshfs_dir_t\fP"
.br
.ti -1c
.RI "typedef \fBshfs_dir_t\fP * \fBSHDIR\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBshmsgget\fP (\fBshpeer_t\fP *peer)"
.br
.RI "\fIObtain the message queue id from a share library peer. \fP"
.ti -1c
.RI "int \fBshmsgsnd\fP (int msqid, const void *msgp, size_t msgsz)"
.br
.RI "\fISend a message to a share library peer. \fP"
.ti -1c
.RI "int \fBshmsg_write\fP (int msg_qid, \fBshbuf_t\fP *msg_buff, \fBshkey_t\fP *dest_key)"
.br
.RI "\fISend a message to a share library peer. \fP"
.ti -1c
.RI "int \fBshmsgrcv\fP (int msqid, void *msgp, size_t msgsz)"
.br
.RI "\fIReceive a message from a share library peer. \fP"
.ti -1c
.RI "int \fBshmsg_read\fP (int msg_qid, \fBshkey_t\fP *src_key, \fBshbuf_t\fP *msg_buff)"
.br
.RI "\fIReceive a message from a share library peer. \fP"
.ti -1c
.RI "int \fBshmsgctl\fP (int msg_qid, int cmd, int value)"
.br
.RI "\fISet or retrieve message queue control attributes. \fP"
.ti -1c
.RI "int \fBshfs_journal_index\fP (\fBshkey_t\fP *key)"
.br
.RI "\fIIdentify the default journal number for a inode's name. \fP"
.ti -1c
.RI "\fBshpeer_t\fP * \fBshapp_init\fP (char *exec_path, char *host, int flags)"
.br
.RI "\fIInitialize the share library runtime. \fP"
.ti -1c
.RI "int \fBshapp_register\fP (\fBshpeer_t\fP *peer)"
.br
.RI "\fIRequest a peer transaction operation. \fP"
.ti -1c
.RI "char * \fBshfs_app_name\fP (char *app_name)"
.br
.RI "\fIStrips the absolute parent from \fIapp_name\fP. \fP"
.ti -1c
.RI "uint64_t \fBshfs_crc\fP (\fBshfs_ino_t\fP *file)"
.br
.RI "\fIThe share library file inode's data checksum. \fP"
.ti -1c
.RI "\fBshsize_t\fP \fBshfs_size\fP (\fBshfs_ino_t\fP *file)"
.br
.ti -1c
.RI "\fBshfs_t\fP * \fBshfs_init\fP (\fBshpeer_t\fP *peer)"
.br
.RI "\fICreates a reference to a sharefs filesystem. \fP"
.ti -1c
.RI "void \fBshfs_free\fP (\fBshfs_t\fP **tree_p)"
.br
.RI "\fIFree a reference to a sharefs partition. \fP"
.ti -1c
.RI "\fBshkey_t\fP * \fBshfs_partition_id\fP (\fBshfs_t\fP *tree)"
.br
.RI "\fIObtain the partition id for a sharefs partition. \fP"
.ti -1c
.RI "char * \fBshfs_journal_path\fP (\fBshfs_t\fP *tree, int index)"
.br
.RI "\fIThe local file-system path where a sharefs journal is stored. \fP"
.ti -1c
.RI "\fBshfs_journal_t\fP * \fBshfs_journal_open\fP (\fBshfs_t\fP *tree, int index)"
.br
.RI "\fIReturns an instance to a sharefs filesystem journal. \fP"
.ti -1c
.RI "int \fBshfs_journal_scan\fP (\fBshfs_t\fP *tree, \fBshkey_t\fP *key, \fBshfs_idx_t\fP *idx)"
.br
.RI "\fISearch for the first empty inode entry in a journal. \fP"
.ti -1c
.RI "int \fBshfs_journal_close\fP (\fBshfs_journal_t\fP **jrnl_p)"
.br
.RI "\fIRelease all resources being used to reference a shared partition journal. \fP"
.ti -1c
.RI "\fBshfs_block_t\fP * \fBshfs_journal_block\fP (\fBshfs_journal_t\fP *jrnl, int ino)"
.br
.RI "\fIRetrieve an inode block from a journal. \fP"
.ti -1c
.RI "size_t \fBshfs_journal_size\fP (\fBshfs_journal_t\fP *jrnl)"
.br
.RI "\fICalculates the byte size of a sharefs partition journal. \fP"
.ti -1c
.RI "void \fBshfs_journal_cache_free\fP (\fBshfs_t\fP *tree)"
.br
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_inode\fP (\fBshfs_ino_t\fP *parent, char *name, int mode)"
.br
.RI "\fIRetrieve a sharefs inode directory entry based on a given parent inode and path name. \fP"
.ti -1c
.RI "\fBshfs_t\fP * \fBshfs_inode_tree\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIObtain the shfs partition associated with a particular inode. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_inode_root\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIObtain the root partition inode associated with a particular inode. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_inode_parent\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIObtain the parent [directory/container] inode associated with a particular inode. \fP"
.ti -1c
.RI "int \fBshfs_inode_write_entity\fP (\fBshfs_ino_t\fP *ent)"
.br
.RI "\fIWrite an entity such as a file inode. \fP"
.ti -1c
.RI "int \fBshfs_inode_write_block\fP (\fBshfs_t\fP *tree, \fBshfs_block_t\fP *blk)"
.br
.RI "\fIWrites a single inode block to a sharefs filesystem journal. \fP"
.ti -1c
.RI "int \fBshfs_inode_read_block\fP (\fBshfs_t\fP *tree, \fBshfs_idx_t\fP *pos, \fBshfs_block_t\fP *blk)"
.br
.RI "\fIRetrieve a single data block from a sharefs filesystem inode. \fP"
.ti -1c
.RI "\fBshkey_t\fP * \fBshfs_inode_token\fP (\fBshfs_ino_t\fP *parent, int mode, char *fname)"
.br
.RI "\fIReturns a unique key token representing an inode. \fP"
.ti -1c
.RI "void \fBshfs_inode_filename_set\fP (\fBshfs_ino_t\fP *inode, char *name)"
.br
.RI "\fIAssign an inode a filename. \fP"
.ti -1c
.RI "char * \fBshfs_inode_filename_get\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIReturns the filename of the inode. \fP"
.ti -1c
.RI "char * \fBshfs_inode_path\fP (\fBshfs_ino_t\fP *inode)"
.br
.ti -1c
.RI "char * \fBshfs_inode_id\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIA unique hexadecimal string representing a sharefs inode. \fP"
.ti -1c
.RI "char * \fBshfs_inode_print\fP (\fBshfs_ino_t\fP *inode)"
.br
.ti -1c
.RI "char * \fBshfs_inode_block_print\fP (\fBshfs_block_t\fP *jblk)"
.br
.ti -1c
.RI "int \fBshfs_block_type\fP (\fBshfs_block_t\fP *blk)"
.br
.RI "\fIThe type of an inode block. \fP"
.ti -1c
.RI "int \fBshfs_type\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIThe type of inode. \fP"
.ti -1c
.RI "int \fBshfs_block_format\fP (\fBshfs_block_t\fP *blk)"
.br
.RI "\fIThe format of an inode block. \fP"
.ti -1c
.RI "int \fBshfs_format\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIThe format of an inode. \fP"
.ti -1c
.RI "int \fBshfs_format_set\fP (\fBshfs_ino_t\fP *file, int format)"
.br
.RI "\fIConvert the inode to hold a different data format. \fP"
.ti -1c
.RI "char * \fBshfs_type_str\fP (int type)"
.br
.RI "\fIA string representation of an inode type. \fP"
.ti -1c
.RI "char * \fBshfs_format_str\fP (int format)"
.br
.RI "\fIA string representation of an inode format. \fP"
.ti -1c
.RI "int \fBshfs_link\fP (\fBshfs_ino_t\fP *parent, \fBshfs_ino_t\fP *inode)"
.br
.RI "\fILink a child inode inside a parent's directory listing. \fP"
.ti -1c
.RI "int \fBshfs_unlink\fP (\fBshfs_ino_t\fP *inode)"
.br
.RI "\fIUnlink an inode from a sharefs partition. \fP"
.ti -1c
.RI "int \fBshfs_link_find\fP (\fBshfs_ino_t\fP *parent, \fBshkey_t\fP *key, \fBshfs_block_t\fP *ret_blk)"
.br
.RI "\fIFind an inode in it's parent using it's key name. \fP"
.ti -1c
.RI "int \fBshfs_link_count\fP (\fBshfs_ino_t\fP *parent)"
.br
.RI "\fIObtain the number of inode's contained by a parent. \fP"
.ti -1c
.RI "int \fBshfs_list\fP (\fBshfs_ino_t\fP *parent, \fBshfs_dirent_t\fP **dirent_p)"
.br
.RI "\fIObtain a list of inode's contained by the parent. \fP"
.ti -1c
.RI "void \fBshfs_list_free\fP (\fBshfs_dirent_t\fP **ent_p)"
.br
.RI "\fIFrees a list of directory entries. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_dir_base\fP (\fBshfs_t\fP *tree)"
.br
.RI "\fIThe base SHINODE_PARTITION type inode for a sharefs partition. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_dir_cwd\fP (\fBshfs_t\fP *tree)"
.br
.RI "\fIThe current working inode directory for a sharefs partition. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_dir_parent\fP (\fBshfs_ino_t\fP *inode)"
.br
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_dir_entry\fP (\fBshfs_ino_t\fP *inode, char *fname)"
.br
.RI "\fIReturn an inode from a directory inode. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_dir_find\fP (\fBshfs_t\fP *tree, char *path)"
.br
.RI "\fILocate a directory inode on a sharefs partition by an absolute pathname. \fP"
.ti -1c
.RI "\fBshfs_dir_t\fP * \fBshfs_opendir\fP (\fBshfs_t\fP *fs, char *path)"
.br
.RI "\fIOpen a directory to be listed. \fP"
.ti -1c
.RI "\fBshfs_dirent_t\fP * \fBshfs_readdir\fP (\fBshfs_dir_t\fP *dir)"
.br
.ti -1c
.RI "int \fBshfs_closedir\fP (\fBshfs_dir_t\fP *dir)"
.br
.ti -1c
.RI "int \fBshfs_meta\fP (\fBshfs_t\fP *tree, \fBshfs_ino_t\fP *ent, \fBshmeta_t\fP **val_p)"
.br
.RI "\fIObtain a reference to the meta definition hashmap associated with the inode entry. \fP"
.ti -1c
.RI "int \fBshfs_meta_save\fP (\fBshfs_t\fP *tree, \fBshfs_ino_t\fP *ent, \fBshmeta_t\fP *h)"
.br
.RI "\fIFlush the inode's meta map to disk. \fP"
.ti -1c
.RI "const char * \fBshfs_meta_get\fP (\fBshfs_ino_t\fP *file, char *def)"
.br
.RI "\fIRetrieve a SHMETA_XX meta defintion from a share library file. \fP"
.ti -1c
.RI "int \fBshfs_meta_perm\fP (\fBshfs_ino_t\fP *file, char *def, \fBshkey_t\fP *user)"
.br
.ti -1c
.RI "int \fBshfs_meta_set\fP (\fBshfs_ino_t\fP *file, char *def, char *value)"
.br
.ti -1c
.RI "int \fBshfs_sig_verify\fP (\fBshfs_ino_t\fP *file, \fBshkey_t\fP *peer_key)"
.br
.ti -1c
.RI "int \fBshfs_write\fP (\fBshfs_ino_t\fP *file, \fBshbuf_t\fP *buff)"
.br
.RI "\fIWrite auxillary data to a sharefs file inode. \fP"
.ti -1c
.RI "int \fBshfs_read\fP (\fBshfs_ino_t\fP *file, \fBshbuf_t\fP *buff)"
.br
.RI "\fIObtain file data content. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_file_find\fP (\fBshfs_t\fP *tree, char *path)"
.br
.ti -1c
.RI "int \fBshfs_file_pipe\fP (\fBshfs_ino_t\fP *file, int fd)"
.br
.ti -1c
.RI "\fBshkey_t\fP * \fBshfs_file_key\fP (\fBshfs_ino_t\fP *file)"
.br
.ti -1c
.RI "int \fBshfs_file_notify\fP (\fBshfs_ino_t\fP *file)"
.br
.ti -1c
.RI "int \fBshfs_access\fP (\fBshfs_ino_t\fP *inode, \fBshkey_t\fP *user, int flag)"
.br
.RI "\fIPerforms a check to see whether a user has a particular permission to an inode. \fP"
.ti -1c
.RI "int \fBshfs_access_user\fP (\fBshfs_ino_t\fP *inode, \fBshkey_t\fP *user, int flag)"
.br
.ti -1c
.RI "int \fBshfs_access_group\fP (\fBshfs_ino_t\fP *inode, \fBshkey_t\fP *user, int flag)"
.br
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_cache_get\fP (\fBshfs_ino_t\fP *parent, \fBshkey_t\fP *name)"
.br
.ti -1c
.RI "void \fBshfs_cache_set\fP (\fBshfs_ino_t\fP *parent, \fBshfs_ino_t\fP *inode)"
.br
.ti -1c
.RI "void \fBshfs_inode_cache_free\fP (\fBshfs_ino_t\fP *inode)"
.br
.ti -1c
.RI "int \fBshfs_block_stat\fP (\fBshfs_block_t\fP *blk, struct stat *st)"
.br
.ti -1c
.RI "int \fBshfs_fstat\fP (\fBshfs_ino_t\fP *file, struct stat *st)"
.br
.RI "\fIObtain inode attribute information. \fP"
.ti -1c
.RI "int \fBshfs_stat\fP (\fBshfs_t\fP *fs, const char *path, struct stat *st)"
.br
.RI "\fIObtain inode attribute information for a path. \fP"
.ti -1c
.RI "int \fBshfs_aux_read\fP (\fBshfs_ino_t\fP *inode, \fBshbuf_t\fP *ret_buff)"
.br
.RI "\fIRetrieve a full data segment of a sharefs filesystem inode. \fP"
.ti -1c
.RI "int \fBshfs_aux_pread\fP (\fBshfs_ino_t\fP *inode, \fBshbuf_t\fP *ret_buff, off_t seek_of, size_t seek_max)"
.br
.RI "\fIRetrieve a full or partial data segment of a sharefs filesystem inode. \fP"
.ti -1c
.RI "int \fBshfs_aux_write\fP (\fBshfs_ino_t\fP *inode, \fBshbuf_t\fP *buff)"
.br
.RI "\fIStores a full data segment to a sharefs filesystem inode. \fP"
.ti -1c
.RI "int \fBshfs_aux_pwrite\fP (\fBshfs_ino_t\fP *inode, \fBshbuf_t\fP *buff, off_t seek_of, size_t seek_max)"
.br
.RI "\fIStores a full or partial data segment to a sharefs filesystem inode. \fP"
.ti -1c
.RI "ssize_t \fBshfs_aux_pipe\fP (\fBshfs_ino_t\fP *inode, int fd)"
.br
.RI "\fIWrites the auxillary contents of the inode to the file descriptor. \fP"
.ti -1c
.RI "uint64_t \fBshfs_aux_crc\fP (\fBshfs_ino_t\fP *inode)"
.br
.ti -1c
.RI "int \fBshlog\fP (int level, int err_code, char *log_str)"
.br
.ti -1c
.RI "void \fBsherr\fP (int err_code, char *log_str)"
.br
.ti -1c
.RI "void \fBshwarn\fP (char *log_str)"
.br
.ti -1c
.RI "void \fBshinfo\fP (char *log_str)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBshfs_inode_off_t\fP \fBshfs_idx_t::ino\fP"
.br
.RI "\fIAn inode index in journal to initial data block. \fP"
.ti -1c
.RI "\fBshpeer_t\fP \fBshfs_block_access::acc_group\fP"
.br
.ti -1c
.RI "\fBshkey_t\fP \fBshfs_block_access::acc_ward\fP"
.br
.ti -1c
.RI "uint32_t \fBshfs_block_access::acc_mask\fP"
.br
.ti -1c
.RI "\fBshkey_t\fP \fBshfs_block_access::lk_owner\fP"
.br
.ti -1c
.RI "uint32_t \fBshfs_block_access::lk_mask\fP"
.br
.ti -1c
.RI "\fBshsize_t\fP \fBshfs_hdr_t::size\fP"
.br
.RI "\fIThe total size of the data segment being referenced. \fP"
.ti -1c
.RI "\fBshtime_t\fP \fBshfs_hdr_t::ctime\fP"
.br
.RI "\fIThe time that the inode was created. \fP"
.ti -1c
.RI "\fBshtime_t\fP \fBshfs_hdr_t::mtime\fP"
.br
.RI "\fIThe last time this inode was written to. \fP"
.ti -1c
.RI "uint64_t \fBshfs_hdr_t::crc\fP"
.br
.RI "\fIA crc checksum representation of the underlying data. \fP"
.ti -1c
.RI "\fBshfs_attr_t\fP \fBshfs_hdr_t::attr\fP"
.br
.RI "\fIA bitvector specifying inode attributes. \fP"
.ti -1c
.RI "\fBshfs_ino_type_t\fP \fBshfs_hdr_t::type\fP"
.br
.RI "\fIType of inode. \fP"
.ti -1c
.RI "\fBshfs_ino_type_t\fP \fBshfs_hdr_t::format\fP"
.br
.RI "\fIType of inode data contained. \fP"
.ti -1c
.RI "\fBshfs_idx_t\fP \fBshfs_hdr_t::pos\fP"
.br
.RI "\fIInode position in the partition. \fP"
.ti -1c
.RI "\fBshfs_idx_t\fP \fBshfs_hdr_t::npos\fP"
.br
.RI "\fIThe position of the next inode in a chain. \fP"
.ti -1c
.RI "\fBshfs_idx_t\fP \fBshfs_hdr_t::fpos\fP"
.br
.RI "\fIThe position of the first inode in a chain. \fP"
.ti -1c
.RI "unsigned char \fBshfs_block_t::raw\fP [(2048-sizeof(\fBshfs_hdr_t\fP))]"
.br
.RI "\fIThe data segment of the inode block. \fP"
.ti -1c
.RI "off_t \fBshfs_ino_buf::buff_of\fP"
.br
.RI "\fIoffset for data segment from beginning inode data \fP"
.ti -1c
.RI "off_t \fBshfs_ino_buf::buff_pos\fP"
.br
.RI "\fIcurrent IO read/write index position of data segment (buff). \fP"
.ti -1c
.RI "\fBshfs_t\fP * \fBshfs_ino_t::tree\fP"
.br
.RI "\fIThe sharefs partition this inode is a part of. \fP"
.ti -1c
.RI "struct \fBshfs_ino_t\fP * \fBshfs_ino_t::parent\fP"
.br
.RI "\fIThe parent inode containing this inode. \fP"
.ti -1c
.RI "struct \fBshfs_ino_t\fP * \fBshfs_ino_t::base\fP"
.br
.RI "\fIThe root directory inode of the partition. \fP"
.ti -1c
.RI "\fBshmeta_t\fP * \fBshfs_ino_t::cmeta\fP"
.br
.RI "\fIInode entities that are contained inside this [directory] inode. \fP"
.ti -1c
.RI "\fBshmeta_t\fP * \fBshfs_ino_t::meta\fP"
.br
.RI "\fIPrimary meta definitions associated with the inode. \fP"
.ti -1c
.RI "unsigned char * \fBshfs_ino_t::pool\fP"
.br
.RI "\fIType-specific allocated memory pool for inode. \fP"
.ti -1c
.RI "\fBshfs_ino_buf_t\fP \fBshfs_ino_t::stream\fP"
.br
.ti -1c
.RI "\fBshpeer_t\fP \fBshfs_t::peer\fP"
.br
.RI "\fIThe machine related to the sharefs inode's partition. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_t::base_ino\fP"
.br
.RI "\fIRoot directory. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP * \fBshfs_t::cur_ino\fP"
.br
.RI "\fIApplication's current working directory. \fP"
.ti -1c
.RI "\fBshfs_ino_t\fP \fBshfs_t::p_node\fP"
.br
.RI "\fIRoot partition inode (supernode). \fP"
.ti -1c
.RI "void * \fBshfs_t::jcache\fP [16]"
.br
.ti -1c
.RI "\fBshkey_t\fP \fBshmsg_t::dest_key\fP"
.br
.RI "\fIdestination peer of message. \fP"
.ti -1c
.RI "uint32_t \fBshmsg_t::msg_qid\fP"
.br
.RI "\fImessage queue id \fP"
.ti -1c
.RI "uint32_t \fBshmsg_t::msg_size\fP"
.br
.RI "\fItotal size of message content \fP"
.ti -1c
.RI "uint32_t \fBshmsg_t::msg_of\fP"
.br
.RI "\fIoffset of message data \fP"
.ti -1c
.RI "uint32_t \fBshmsg_t::__reserved_1__\fP"
.br
.RI "\fItype of message \fP"
.ti -1c
.RI "uint32_t \fBshmsgq_t::flags\fP"
.br
.RI "\fImessage queue flags SHMSGF_XX \fP"
.ti -1c
.RI "uint32_t \fBshmsgq_t::__reserved_1__\fP"
.br
.ti -1c
.RI "uint32_t \fBshmsgq_t::read_idx\fP"
.br
.RI "\fIread msg seek offset \fP"
.ti -1c
.RI "uint32_t \fBshmsgq_t::write_idx\fP"
.br
.RI "\fIwrite msg seek offset \fP"
.ti -1c
.RI "uint32_t \fBshmsgq_t::read_of\fP"
.br
.RI "\fIread data seek offset \fP"
.ti -1c
.RI "uint32_t \fBshmsgq_t::write_of\fP"
.br
.RI "\fIwrite data seek offset \fP"
.ti -1c
.RI "\fBshmsg_t\fP \fBshmsgq_t::msg\fP [2048]"
.br
.RI "\fItable of message definitions \fP"
.ti -1c
.RI "unsigned char \fBshmsgq_t::data\fP [0]"
.br
.RI "\fIraw message content data \fP"
.ti -1c
.RI "int \fBshfs_journal_t::index\fP"
.br
.RI "\fIThe index number of the journal. \fP"
.ti -1c
.RI "\fBshbuf_t\fP * \fBshfs_journal_t::buff\fP"
.br
.RI "\fIThe data segment of the journaled sharefs file system. \fP"
.ti -1c
.RI "char \fBshfs_journal_t::path\fP [4095+1]"
.br
.RI "\fIThe path to the sharefs partition journal on the local filesystem. \fP"
.ti -1c
.RI "\fBshtime_t\fP \fBshfs_journal_t::stamp\fP"
.br
.ti -1c
.RI "\fBshkey_t\fP \fBshsig_t::sig_peer\fP"
.br
.ti -1c
.RI "\fBshkey_t\fP \fBshsig_t::sig_key\fP"
.br
.ti -1c
.RI "\fBshtime_t\fP \fBshsig_t::sig_stamp\fP"
.br
.ti -1c
.RI "uint32_t \fBshsig_t::sig_expire\fP"
.br
.ti -1c
.RI "uint32_t \fBshsig_t::sig_ref\fP"
.br
.ti -1c
.RI "struct stat \fBshfs_dirent_t::d_stat\fP"
.br
.ti -1c
.RI "uint64_t \fBshfs_dirent_t::d_crc\fP"
.br
.ti -1c
.RI "\fBshfs_ino_type_t\fP \fBshfs_dirent_t::d_type\fP"
.br
.ti -1c
.RI "\fBshfs_ino_type_t\fP \fBshfs_dirent_t::d_format\fP"
.br
.ti -1c
.RI "\fBshfs_attr_t\fP \fBshfs_dirent_t::d_attr\fP"
.br
.ti -1c
.RI "\fBshfs_t\fP * \fBshfs_dir_t::fs\fP"
.br
.ti -1c
.RI "\fBshfs_t\fP * \fBshfs_dir_t::alloc_fs\fP"
.br
.ti -1c
.RI "int \fBshfs_dir_t::ino_tot\fP"
.br
.ti -1c
.RI "int \fBshfs_dir_t::ino_idx\fP"
.br
.ti -1c
.RI "\fBshfs_dirent_t\fP * \fBshfs_dir_t::ino\fP"
.br
.ti -1c
.RI "uint16_t \fBshfs_ref_t::_reserved_\fP"
.br
.ti -1c
.RI "\fBshfs_idx_t\fP \fBshfs_ref_t::ref_pos\fP"
.br
.ti -1c
.RI "\fBshpeer_t\fP \fBshfs_ref_t::ref_peer\fP"
.br
.ti -1c
.RI "\fBshkey_t\fP \fBshfs_rev_t::rev_inode\fP"
.br
.RI "\fIname key of revision inode. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The sharefs file system. 

Message Queues  libshare_fs_msg Transfer data content between applications.
.PP
libshare_fs_inode The 'sharefs' inode sub-system.
.PP
Filesystem Modes  libshare_fs_mode The sharefs file system modes. 
.SH "Define Documentation"
.PP 
.SS "#define BASE_SHMETA_PATH   'meta'"
.PP
A directory prefix referencing file meta information. 
.PP
Definition at line 862 of file shfs.h.
.SS "#define HAS_SHACCESS_INODE(_ino)"\fBValue:\fP
.PP
.nf
( (_ino->blk.hdr.attr & SHATTR_OWNER) || \
    (_ino->blk.hdr.attr & SHATTR_GROUP) || \
    (_ino->blk.hdr.attr & SHATTR_USER) || \
    (_ino->blk.hdr.attr & SHATTR_BLOCK) || \
    (_ino->blk.hdr.attr & SHATTR_FLOCK) \
  )
.fi
.PP
Definition at line 284 of file shfs.h.
.SS "#define HAS_SHMETA_INODE(_ino)"\fBValue:\fP
.PP
.nf
( (_ino->blk.hdr.attr & SHATTR_META) || \
  )
.fi
.PP
Definition at line 292 of file shfs.h.
.SS "#define IS_INODE_CONTAINER(_type)"\fBValue:\fP
.PP
.nf
(_type != SHINODE_AUX && \
   _type != SHINODE_REFERENCE && \
   _type != SHINODE_EXTERNAL && \
   _type != SHINODE_LICENSE && \
   _type != SHINODE_FILE_LOCK)
.fi
.PP
Definition at line 217 of file shfs.h.
.SS "#define MAX_JOURNAL_CACHE_SIZE   16"
.PP
A cache of open journals. 
.PP
Definition at line 584 of file shfs.h.
.SS "#define MSG_NOERROR   010000"
.PP
no error if message is too big 
.PP
Definition at line 643 of file shfs.h.
.SS "#define SHATTR_ARCH   (1 << 0)"
.PP
Indicates the inode contains an SHINODE_ARCHIVE file containing stored directories and/or files. 
.PP
Definition at line 250 of file shfs.h.
.SS "#define SHATTR_BLOCK   (1 << 1)"
.PP
Indicates the inode has a SHINODE_ACCESS ward blocking access. 
.PP
Definition at line 252 of file shfs.h.
.SS "#define SHATTR_COMP   (1 << 2)"
.PP
Indicates the inode is storing compressed data. 
.PP
Definition at line 254 of file shfs.h.
.SS "#define SHATTR_DB   (1 << 3)"
.PP
Indicates the inode is a database. 
.PP
Definition at line 256 of file shfs.h.
.SS "#define SHATTR_ENC   (1 << 4)"
.PP
Indicates the inode is encrypted. 
.PP
Definition at line 258 of file shfs.h.
.SS "#define SHATTR_EXE   (1 << 15)"
.PP
This inode has specific execute permissions. 
.PP
Definition at line 280 of file shfs.h.
.SS "#define SHATTR_FLOCK   (1 << 5)"
.PP
Indicates the inode has a SHINODE_ACCESS lock blocking access. 
.PP
Definition at line 260 of file shfs.h.
.SS "#define SHATTR_LINK   (1 << 6)"
.PP
Indicates the inode is a SHINODE_REFERENCE to another inode. 
.PP
Definition at line 262 of file shfs.h.
.SS "#define SHATTR_LINK_EXT   (1 << 22)"
.PP
A SHINODE_EXTERNAL inode referencing a local-disk path. 
.PP
Definition at line 282 of file shfs.h.
.SS "#define SHATTR_META   (1 << 7)"
.PP
This inode has supplementatal SHINODE_META information. 
.PP
Definition at line 264 of file shfs.h.
.SS "#define SHATTR_OWNER   (1 << 8)"
.PP
This inode has specific owner access permissions. 
.PP
Definition at line 266 of file shfs.h.
.SS "#define SHATTR_READ   (1 << 9)"
.PP
Indicates the inode has specific read permissions. 
.PP
Definition at line 268 of file shfs.h.
.SS "#define SHATTR_SYNC   (1 << 10)"
.PP
Indicates the inode synchronizes with the share daemon. 
.PP
Definition at line 270 of file shfs.h.
.SS "#define SHATTR_TEMP   (1 << 11)"
.PP
Indicates that inode is not persistent. 
.PP
Definition at line 272 of file shfs.h.
.SS "#define SHATTR_USER   (1 << 12)"
.PP
This inode has specific public access permissions. 
.PP
Definition at line 274 of file shfs.h.
.SS "#define SHATTR_VER   (1 << 13)"
.PP
This inode has multiple revision versions. 
.PP
Definition at line 276 of file shfs.h.
.SS "#define SHATTR_WRITE   (1 << 14)"
.PP
This inode has specific write permissions. 
.PP
Definition at line 278 of file shfs.h.
.SS "#define SHFS_ATTR_BITS   'abcdeflmorstuvwx'"
.PP
The character tokens representing the inode attributes. 
.PP
Definition at line 247 of file shfs.h.
.SS "#define SHFS_BLOCK_DATA_SIZE   (SHFS_MAX_BLOCK_SIZE - sizeof(\fBshfs_hdr_t\fP))"
.PP
The size of the data segment each inode contains. 
.PP
Definition at line 233 of file shfs.h.
.SS "#define shfs_gid(_inode)   (strtoll(shfs_meta_get((_inode), (_flag) | SHMETA_GROUP)))"
.PP
A 64bit group id associated with a read, write, or exec inode permission. 
.PP
Definition at line 896 of file shfs.h.
.SS "#define SHFS_MAX_BLOCK   57344"
.PP
The maximum number of blocks in a sharefs journal. 
.PP
Definition at line 238 of file shfs.h.
.SS "#define SHFS_MAX_BLOCK_SIZE   2048"
.PP
The maximum size a single block can contain. \fBNote:\fP
.RS 4
Each block segment is 2048 bytes which is equal to the size of \fC\fBshfs_ino_t\fP\fP structure. 
.RE
.PP

.PP
Definition at line 228 of file shfs.h.
.SS "#define SHFS_MAX_JOURNAL   57344"
.PP
The number of journals a sharefs filesystem contains. \fBshfs_journal_t.index\fP 
.PP
Definition at line 777 of file shfs.h.
.SS "#define SHFS_MAX_JOURNAL_SIZE   (SHFS_MAX_BLOCK * SHFS_MAX_BLOCK_SIZE)"
.PP
The maximum number of bytes in a sharefs file-system journal. 
.PP
Definition at line 782 of file shfs.h.
.SS "#define shfs_meta_free(_meta_p)   shmeta_free(_meta_p)"
.PP
Free an instance to a sharedfs meta definition hashmap. \fBNote:\fP
.RS 4
Directly calls \fC\fBshmeta_free()\fP\fP. 
.RE
.PP

.PP
Definition at line 868 of file shfs.h.
.SS "#define SHFS_OVERLAY   (1 << 0)"
.PP
Overlay sharefs on top of current filesystem. \fBNote:\fP
.RS 4
Use 'shnet --nosync' for example behavior of this flag. 
.RE
.PP

.PP
Definition at line 65 of file shfs.h.
.SS "#define SHFS_PATH_MAX   (SHFS_BLOCK_DATA_SIZE - 34)"
.PP
The maximum length of a sharefs file name. \fBNote:\fP
.RS 4
The length is subtracted by 16 bytes of a hash tag incase to track longer filenames and 1 byte for a null-terminator. 
.RE
.PP

.PP
Definition at line 244 of file shfs.h.
.SS "#define SHFS_PRIVATE   (1 << 2)"
.PP
A sharefs filesystem that is externally unaccessible beyond the scope of this application. \fBNote:\fP
.RS 4
Use 'shnet --hidden' for example behavior of this flag. 
.RE
.PP

.PP
Definition at line 78 of file shfs.h.
.SS "#define SHFS_REMOTE   (1 << 4)"
.PP
The partition is located on a remote machine. 
.PP
Definition at line 88 of file shfs.h.
.SS "#define SHFS_SYNC   (1 << 3)"
.PP
Disabling caching and asynchronous file operations. 
.PP
Definition at line 83 of file shfs.h.
.SS "#define SHFS_TRACK   (1 << 1)"
.PP
Track all revisions of file modifications. \fBNote:\fP
.RS 4
Use 'shnet --track' for example behavior of this flag. 
.RE
.PP

.PP
Definition at line 71 of file shfs.h.
.SS "#define shfs_uid(_inode, _flag)   (strtoll(shfs_meta_get((_inode), (_flag) | SHMETA_USER)))"
.PP
A 64bit user id associated with a read, write, or exec inode permission. 
.PP
Definition at line 890 of file shfs.h.
.SS "#define SHINODE_ACCESS   115"
.PP
Inode specific permissions based on credentials. 
.PP
Definition at line 206 of file shfs.h.
.SS "#define SHINODE_APP   100"
.PP
Inode is in reference to an application-specific directory. \fBNote:\fP
.RS 4
See also: \fCshfs_node.d_type\fP 
.RE
.PP

.PP
Definition at line 123 of file shfs.h.
.SS "#define SHINODE_ARCHIVE   104"
.PP
An archive of files and/or directories. \fBNote:\fP
.RS 4
See also: \fCshfs_node.d_type\fP 
.RE
.PP

.PP
Definition at line 147 of file shfs.h.
.SS "#define SHINODE_AUX   108"
.PP
An auxillary unparseable data segment stored in the sharefs sub-system. 
.PP
Definition at line 169 of file shfs.h.
.SS "#define SHINODE_BINARY   110"
.PP
Raw binary data referenced by a. \fBSee also:\fP
.RS 4
\fBSHINODE_FILE\fP inode. 
.RE
.PP
\fBNote:\fP
.RS 4
A SHINODE_BINARY inode contains SHINODE_AUX referencing the raw binary data segments. 
.RE
.PP

.PP
Definition at line 181 of file shfs.h.
.SS "#define SHINODE_COMPRESS   112"
.PP
A zlib compressed binary segment. 
.PP
Definition at line 191 of file shfs.h.
.SS "#define SHINODE_CRYPT   113"
.PP
A TEA encoded binary segment. 
.PP
Definition at line 196 of file shfs.h.
.SS "#define SHINODE_DATABASE   114"
.PP
A reference to a sqlite database. 
.PP
Definition at line 201 of file shfs.h.
.SS "#define SHINODE_DEFAULT_ATTR_FORMAT(_attr)"\fBValue:\fP
.PP
.nf
( \
    ((_attr) & SHATTR_DB) ? SHINODE_DATABASE : \
    ((_attr) & SHATTR_VER) ? SHINODE_REVISION : \
    ((_attr) & SHATTR_ENC) ? SHINODE_CRYPT : \
    ((_attr) & SHATTR_COMP) ? SHINODE_COMPRESS : \
    ((_attr) & SHATTR_LINK_EXT) ? SHINODE_EXTERNAL : \
    SHINODE_BINARY \
  )
.fi
.PP
The default format for data contained by a SHINODE_FILE inode. 
.PP
Definition at line 297 of file shfs.h.
.SS "#define SHINODE_DELTA   103"
.PP
Inode is a reference to a binary delta revision. \fBNote:\fP
.RS 4
See also: \fCshfs_node.d_type\fP 
.RE
.PP

.PP
Definition at line 141 of file shfs.h.
.SS "#define SHINODE_DIRECTORY   107"
.PP
A directory containing multiple file references. 
.PP
Definition at line 164 of file shfs.h.
.SS "#define SHINODE_FILE   109"
.PP
A generic reference to a path which contains further references to data. \fBSee also:\fP
.RS 4
\fBSHINODE_AUX\fP \fBSHINODE_META\fP \fBSHINODE_DELTA\fP 
.RE
.PP

.PP
Definition at line 175 of file shfs.h.
.SS "#define SHINODE_FILE_LOCK   116"
.PP
Inode specific access mutex. 
.PP
Definition at line 211 of file shfs.h.
.SS "#define SHINODE_META   106"
.PP
A meta definition hashmap (meta map). \fBNote:\fP
.RS 4
The referenced inode may be local or remote. 
.RE
.PP

.PP
Definition at line 159 of file shfs.h.
.SS "#define SHINODE_NULL   0"
.PP
An inode reference to nothing. 
.PP
Definition at line 117 of file shfs.h.
.SS "#define SHINODE_PARTITION   101"
.PP
Inode is the root of an entire sharefs partition. \fBNote:\fP
.RS 4
See also: \fCshfs_node.d_type\fP 
.RE
.PP

.PP
Definition at line 129 of file shfs.h.
.SS "#define SHINODE_PEER   102"
.PP
Inode is a reference to a remote sharefs partition. \fBNote:\fP
.RS 4
See also: \fCshfs_node.d_type\fP 
.RE
.PP

.PP
Definition at line 135 of file shfs.h.
.SS "#define SHINODE_REFERENCE   105"
.PP
A reference to another inode. \fBNote:\fP
.RS 4
The referenced inode may be local or remote. 
.RE
.PP

.PP
Definition at line 153 of file shfs.h.
.SS "#define SHINODE_REVISION   111"
.PP
A reference to a particular version of a file. 
.PP
Definition at line 186 of file shfs.h.
.SS "#define SHMETA_DESC   'desc'"
.PP
A textual description of the inode. 
.PP
Definition at line 857 of file shfs.h.
.SS "#define SHMETA_SIGNATURE   'signature'"
.PP
A digital signature. 
.PP
Definition at line 852 of file shfs.h.
.SS "#define SHMETA_USER   'user'"
.PP
The read-access group assigned to the inode. 
.PP
Definition at line 846 of file shfs.h.
.SS "#define SHMSGF_ANONYMOUS   (1 << 2)"
.PP
allow for receiving messages sent by one self. 
.PP
Definition at line 660 of file shfs.h.
.SS "#define SHMSGF_AUTH   (1 << 4)"
.PP
unused 
.PP
Definition at line 663 of file shfs.h.
.SS "#define SHMSGF_OVERFLOW   (1 << 1)"
.PP
discard stale messages when queue is full. 
.PP
Definition at line 657 of file shfs.h.
.SS "#define SHMSGF_RMID   (1 << 0)"
.PP
remove a message queue's resources. 
.PP
Definition at line 654 of file shfs.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBshfs_ino_t\fP \fBSHFL\fP"
.PP
A convienence macro for accessing a sharefs file node. 
.PP
Definition at line 450 of file shfs.h.
.SS "typedef struct \fBshfs_t\fP \fBSHFS\fP"
.PP
A convienence macro for accessing a sharefs file partition. 
.PP
Definition at line 446 of file shfs.h.
.SS "typedef __uint32_t \fBshfs_attr_t\fP"
.PP
A sharefs inode attribute definitions. 
.PP
Definition at line 321 of file shfs.h.
.SS "typedef struct \fBshfs_idx_t\fP \fBshfs_idx_t\fP"
.PP
A sharefs filesystem inode position header. 
.PP
Definition at line 327 of file shfs.h.
.SS "typedef struct \fBshfs_ino_t\fP \fBshfs_ino_t\fP"
.PP
A sharefs filesystem inode. 
.PP
Definition at line 105 of file shfs.h.
.SS "typedef __uint16_t \fBshfs_ino_type_t\fP"
.PP
A sharefs inode type definition. 
.PP
Definition at line 316 of file shfs.h.
.SS "typedef __uint16_t \fBshfs_inode_off_t\fP"
.PP
A sharefs filesystem inode or journal reference. 
.PP
Definition at line 311 of file shfs.h.
.SS "typedef struct \fBshfs_t\fP \fBshfs_t\fP"
.PP
A type defintion for the sharefs filesytem structure. 
.PP
Definition at line 98 of file shfs.h.
.SH "Function Documentation"
.PP 
.SS "\fBshpeer_t\fP* shapp_init (char * exec_path, char * host, int flags)"
.PP
Initialize the share library runtime. \fBParameters:\fP
.RS 4
\fIexec_path\fP The process's executable path. 
.br
\fIhost\fP The host that the app runs on or NULL for localhost. 
.br
\fIflags\fP SHAPP_XX flags 
.RE
.PP

.SS "int shapp_register (\fBshpeer_t\fP * peer)"
.PP
Request a peer transaction operation. 
.SS "int shfs_access (\fBshfs_ino_t\fP * inode, \fBshkey_t\fP * user, int flag)"
.PP
Performs a check to see whether a user has a particular permission to an inode. 
.SS "char* shfs_app_name (char * app_name)"
.PP
Strips the absolute parent from \fIapp_name\fP. \fBNote:\fP
.RS 4
'/test/one/two' becomes 'two' 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIapp_name\fP The running application's executable path 
.RE
.PP
\fBReturns:\fP
.RS 4
Relative filename of executable. 
.RE
.PP

.SS "ssize_t shfs_aux_pipe (\fBshfs_ino_t\fP * inode, int fd)"
.PP
Writes the auxillary contents of the inode to the file descriptor. \fBParameters:\fP
.RS 4
\fIinode\fP The sharefs filesystem inode to print from. 
.br
\fIfd\fP A posix file descriptor number representing a socket or local filesystem file reference. 
.RE
.PP
\fBReturns:\fP
.RS 4
The size of the bytes written or a SHERR_XX error code on error. On error one of the following error codes will be set: SHERR_BADF fd is not a valid file descriptor or is not open for writing. 
.RE
.PP

.SS "int shfs_aux_pread (\fBshfs_ino_t\fP * inode, \fBshbuf_t\fP * ret_buff, off_t seek_of, size_t seek_max)"
.PP
Retrieve a full or partial data segment of a sharefs filesystem inode. \fBParameters:\fP
.RS 4
\fIinode\fP The inode whose data is being retrieved. 
.br
\fIret_buff\fP The \fC\fBshbuf_t\fP\fP return buffer. 
.br
\fIseek_of\fP The offset to begin reading data from the inode. 
.br
\fIseek_max\fP The length of data to be read or zero (0) to indicate no limit. 
.RE
.PP
\fBReturns:\fP
.RS 4
A zero (0) on success or an libshare error code no failure. 
.RE
.PP

.SS "int shfs_aux_pwrite (\fBshfs_ino_t\fP * inode, \fBshbuf_t\fP * buff, off_t seek_of, size_t seek_max)"
.PP
Stores a full or partial data segment to a sharefs filesystem inode. \fBParameters:\fP
.RS 4
\fIinode\fP The inode whose data is being retrieved. 
.br
\fIbuff\fP The data segment to write to the inode. 
.br
\fIseek_of\fP The offset to begin writing data to the inode. 
.br
\fIseek_max\fP The length of data to be write or zero (0) to indicate no limit. 
.RE
.PP
\fBReturns:\fP
.RS 4
A zero (0) on success or an libshare error code no failure. 
.RE
.PP
\fBNote:\fP
.RS 4
A inode must be linked before it can be written to. 
.RE
.PP

.SS "int shfs_aux_read (\fBshfs_ino_t\fP * inode, \fBshbuf_t\fP * ret_buff)"
.PP
Retrieve a full data segment of a sharefs filesystem inode. \fBParameters:\fP
.RS 4
\fIinode\fP The inode whose data is being retrieved. 
.br
\fIret_buff\fP The \fC\fBshbuf_t\fP\fP return buffer. 
.RE
.PP
\fBReturns:\fP
.RS 4
A zero (0) on success or an libshare error code no failure. 
.RE
.PP

.SS "int shfs_aux_write (\fBshfs_ino_t\fP * inode, \fBshbuf_t\fP * buff)"
.PP
Stores a full data segment to a sharefs filesystem inode. \fBParameters:\fP
.RS 4
\fIinode\fP The inode whose data is being retrieved. 
.br
\fIbuff\fP The data segment to write to the inode. 
.RE
.PP
\fBReturns:\fP
.RS 4
A zero (0) on success or an libshare error code no failure. 
.RE
.PP
\fBNote:\fP
.RS 4
A inode must be linked before it can be written to. 
.RE
.PP

.SS "int shfs_block_format (\fBshfs_block_t\fP * blk)"
.PP
The format of an inode block. 
.SS "int shfs_block_type (\fBshfs_block_t\fP * blk)"
.PP
The type of an inode block. 
.SS "uint64_t shfs_crc (\fBshfs_ino_t\fP * file)"
.PP
The share library file inode's data checksum. 
.SS "\fBshfs_ino_t\fP* shfs_dir_base (\fBshfs_t\fP * tree)"
.PP
The base SHINODE_PARTITION type inode for a sharefs partition. 
.SS "\fBshfs_ino_t\fP* shfs_dir_cwd (\fBshfs_t\fP * tree)"
.PP
The current working inode directory for a sharefs partition. 
.SS "\fBshfs_ino_t\fP* shfs_dir_entry (\fBshfs_ino_t\fP * inode, char * fname)"
.PP
Return an inode from a directory inode. 
.SS "\fBshfs_ino_t\fP* shfs_dir_find (\fBshfs_t\fP * tree, char * path)"
.PP
Locate a directory inode on a sharefs partition by an absolute pathname. 
.SS "\fBshfs_ino_t\fP* shfs_dir_parent (\fBshfs_ino_t\fP * inode)"\fBReturns:\fP
.RS 4
The SHINODE_DIRECTORY parent of an inode. 
.RE
.PP

.SS "int shfs_format (\fBshfs_ino_t\fP * inode)"
.PP
The format of an inode. 
.SS "int shfs_format_set (\fBshfs_ino_t\fP * file, int format)"
.PP
Convert the inode to hold a different data format. 
.SS "char* shfs_format_str (int format)"
.PP
A string representation of an inode format. 
.SS "void shfs_free (\fBshfs_t\fP ** tree_p)"
.PP
Free a reference to a sharefs partition. \fBParameters:\fP
.RS 4
\fItree_p\fP A reference to the sharefs partition instance to free. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBshkeystore.c\fP.
.SS "int shfs_fstat (\fBshfs_ino_t\fP * file, struct stat * st)"
.PP
Obtain inode attribute information. An SHERR_NOENT error occurs if inode format is not set. 
.PP
\fBParameters:\fP
.RS 4
\fIThe\fP inode to generate info for. 
.br
\fIst\fP The result info structure. 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero (0) on success or a libshare error code. 
.RE
.PP

.SS "\fBshfs_t\fP* shfs_init (\fBshpeer_t\fP * peer)"
.PP
Creates a reference to a sharefs filesystem. \fBParameters:\fP
.RS 4
\fIpeer\fP A local or remote reference to a sharefs partition. \fIflags\fP A combination of SHFS_PARTITION_XXX flags. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBshfs_t\fP A share partition associated with the peer specified or the local default partition if a NULL peer is specified. 
.RE
.PP
\fBTodo\fP
.RS 4
write local file '/system/version' with current version. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBshkeystore.c\fP.
.SS "\fBshfs_ino_t\fP* shfs_inode (\fBshfs_ino_t\fP * parent, char * name, int mode)"
.PP
Retrieve a sharefs inode directory entry based on a given parent inode and path name. \fBNote:\fP
.RS 4
Searches for a reference to a sharefs inode labelled 'name' in the \fIparent\fP inode. 
.PP
A new inode is created if a pre-existing one is not found. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP The parent inode such as a directory where the file presides. 
.br
\fIname\fP The relational pathname of the file being referenced. 
.br
\fImode\fP The type of information that this inode is referencing (SHINODE_XX). 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fCshfs_node\fP is returned based on the \fCparent\fP, \fCname\fP, \fCand\fP mode specified. If one already exists it will be returned, and otherwise a new entry will be created. 
.RE
.PP
\fBNote:\fP
.RS 4
A new inode will be linked to the sharefs partition if it does not exist. 
.RE
.PP

.SS "char* shfs_inode_filename_get (\fBshfs_ino_t\fP * inode)"
.PP
Returns the filename of the inode. 
.SS "void shfs_inode_filename_set (\fBshfs_ino_t\fP * inode, char * name)"
.PP
Assign an inode a filename. 
.SS "char* shfs_inode_id (\fBshfs_ino_t\fP * inode)"
.PP
A unique hexadecimal string representing a sharefs inode. 
.SS "\fBshfs_ino_t\fP* shfs_inode_parent (\fBshfs_ino_t\fP * inode)"
.PP
Obtain the parent [directory/container] inode associated with a particular inode. \fBParameters:\fP
.RS 4
\fIinode\fP The inode in reference. 
.RE
.PP

.SS "int shfs_inode_read_block (\fBshfs_t\fP * tree, \fBshfs_idx_t\fP * pos, \fBshfs_block_t\fP * blk)"
.PP
Retrieve a single data block from a sharefs filesystem inode. \fBParameters:\fP
.RS 4
\fItree\fP The sharefs partition allocated by \fC\fBshfs_init()\fP\fP. 
.br
\fIinode\fP The inode whose data is being retrieved. 
.br
\fIhdr\fP A specification of where the block is location in the sharefs filesystem partition. 
.br
\fIinode\fP The inode block data to be filled in. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 0 on success and a SHERR_XXX on failure. 
.RE
.PP

.SS "\fBshfs_ino_t\fP* shfs_inode_root (\fBshfs_ino_t\fP * inode)"
.PP
Obtain the root partition inode associated with a particular inode. \fBParameters:\fP
.RS 4
\fIinode\fP The inode in reference. 
.RE
.PP

.SS "\fBshkey_t\fP* shfs_inode_token (\fBshfs_ino_t\fP * parent, int mode, char * fname)"
.PP
Returns a unique key token representing an inode. \fBParameters:\fP
.RS 4
\fIparent\fP The parent inode of the inode being referenced. 
.RE
.PP

.SS "\fBshfs_t\fP* shfs_inode_tree (\fBshfs_ino_t\fP * inode)"
.PP
Obtain the shfs partition associated with a particular inode. \fBParameters:\fP
.RS 4
\fIinode\fP The inode in reference. 
.RE
.PP

.SS "int shfs_inode_write_block (\fBshfs_t\fP * tree, \fBshfs_block_t\fP * blk)"
.PP
Writes a single inode block to a sharefs filesystem journal. 
.SS "int shfs_inode_write_entity (\fBshfs_ino_t\fP * ent)"
.PP
Write an entity such as a file inode. 
.SS "\fBshfs_block_t\fP* shfs_journal_block (\fBshfs_journal_t\fP * jrnl, int ino)"
.PP
Retrieve an inode block from a journal. 
.SS "int shfs_journal_close (\fBshfs_journal_t\fP ** jrnl_p)"
.PP
Release all resources being used to reference a shared partition journal. \fBParameters:\fP
.RS 4
\fIjrnl_p\fP A reference to the journal. 
.RE
.PP
\fBReturns:\fP
.RS 4
A zero (0) on success and a negative error code on failure. 
.RE
.PP

.SS "int shfs_journal_index (\fBshkey_t\fP * key)"
.PP
Identify the default journal number for a inode's name. \fBReturns:\fP
.RS 4
A sharefs filesystem journal index number. 
.RE
.PP
\fBNote:\fP
.RS 4
Journal #0 is reserved for system use. 
.RE
.PP

.SS "\fBshfs_journal_t\fP* shfs_journal_open (\fBshfs_t\fP * tree, int index)"
.PP
Returns an instance to a sharefs filesystem journal. 
.SS "char* shfs_journal_path (\fBshfs_t\fP * tree, int index)"
.PP
The local file-system path where a sharefs journal is stored. 
.SS "int shfs_journal_scan (\fBshfs_t\fP * tree, \fBshkey_t\fP * key, \fBshfs_idx_t\fP * idx)"
.PP
Search for the first empty inode entry in a journal. \fBParameters:\fP
.RS 4
\fItree\fP The sharefs filesystem partition. 
.br
\fIkey\fP The token name of the inode being referenced. 
.br
\fIidx\fP The index number of the journal. 
.RE
.PP
\fBReturns:\fP
.RS 4
A inode index number or zero (0) on failure. 
.RE
.PP
\fBNote:\fP
.RS 4
Inode index #0 is reserved for system use. 
.RE
.PP

.SS "size_t shfs_journal_size (\fBshfs_journal_t\fP * jrnl)"
.PP
Calculates the byte size of a sharefs partition journal. 
.SS "int shfs_link (\fBshfs_ino_t\fP * parent, \fBshfs_ino_t\fP * inode)"
.PP
Link a child inode inside a parent's directory listing. \fBNote:\fP
.RS 4
The birth timestamp and token key is assigned on link. 
.RE
.PP

.SS "int shfs_link_count (\fBshfs_ino_t\fP * parent)"
.PP
Obtain the number of inode's contained by a parent. 
.SS "int shfs_link_find (\fBshfs_ino_t\fP * parent, \fBshkey_t\fP * key, \fBshfs_block_t\fP * ret_blk)"
.PP
Find an inode in it's parent using it's key name. 
.SS "int shfs_list (\fBshfs_ino_t\fP * parent, \fBshfs_dirent_t\fP ** dirent_p)"
.PP
Obtain a list of inode's contained by the parent. \fBParameters:\fP
.RS 4
\fIparent\fP The inode to list the contents of. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of directory entries returned or a negative libshare error code. 
.RE
.PP

.SS "void shfs_list_free (\fBshfs_dirent_t\fP ** ent_p)"
.PP
Frees a list of directory entries. \fBParameters:\fP
.RS 4
\fIent_p\fP A reference to the array of entries. 
.RE
.PP

.SS "int shfs_meta (\fBshfs_t\fP * tree, \fBshfs_ino_t\fP * ent, \fBshmeta_t\fP ** val_p)"
.PP
Obtain a reference to the meta definition hashmap associated with the inode entry. \fBNote:\fP
.RS 4
The \fC\fBshfs_ino_t\fP\fP inode will cache the hashmap reference. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIent\fP The inode entry. 
.br
\fIval_p\fP A memory reference to the meta definition hashmap being filled in. 
.RE
.PP

.SS "const char* shfs_meta_get (\fBshfs_ino_t\fP * file, char * def)"
.PP
Retrieve a SHMETA_XX meta defintion from a share library file. 
.SS "int shfs_meta_save (\fBshfs_t\fP * tree, \fBshfs_ino_t\fP * ent, \fBshmeta_t\fP * h)"
.PP
Flush the inode's meta map to disk. \fBParameters:\fP
.RS 4
\fIThe\fP inode associated with the meta map. 
.br
\fIval\fP The meta map to store to disk. 
.RE
.PP
\fBReturns:\fP
.RS 4
A zero (0) on success and a negative one (-1) on failure. 
.RE
.PP

.SS "\fBshfs_dir_t\fP* shfs_opendir (\fBshfs_t\fP * fs, char * path)"
.PP
Open a directory to be listed. \fBParameters:\fP
.RS 4
\fIfs\fP The sharefs partition to use or NULL for default. 
.RE
.PP
\fBReturns:\fP
.RS 4
A resource for tracking a directory list. 
.RE
.PP

.SS "\fBshkey_t\fP* shfs_partition_id (\fBshfs_t\fP * tree)"
.PP
Obtain the partition id for a sharefs partition. \fBNote:\fP
.RS 4
The local parition will always return zero (0). 
.RE
.PP

.SS "int shfs_read (\fBshfs_ino_t\fP * file, \fBshbuf_t\fP * buff)"
.PP
Obtain file data content. An SHERR_NOENT error occurs if file format is not set. 
.PP
\fBExamples: \fP
.in +1c
\fBshkeystore.c\fP.
.SS "int shfs_stat (\fBshfs_t\fP * fs, const char * path, struct stat * st)"
.PP
Obtain inode attribute information for a path. 
.SS "int shfs_type (\fBshfs_ino_t\fP * inode)"
.PP
The type of inode. 
.SS "char* shfs_type_str (int type)"
.PP
A string representation of an inode type. 
.SS "int shfs_unlink (\fBshfs_ino_t\fP * inode)"
.PP
Unlink an inode from a sharefs partition. \fBNote:\fP
.RS 4
This effectively deletes the inode. 
.RE
.PP

.SS "int shfs_write (\fBshfs_ino_t\fP * file, \fBshbuf_t\fP * buff)"
.PP
Write auxillary data to a sharefs file inode. 
.PP
\fBExamples: \fP
.in +1c
\fBshkeystore.c\fP.
.SS "int shmsg_read (int msg_qid, \fBshkey_t\fP * src_key, \fBshbuf_t\fP * msg_buff)"
.PP
Receive a message from a share library peer. 
.SS "int shmsg_write (int msg_qid, \fBshbuf_t\fP * msg_buff, \fBshkey_t\fP * dest_key)"
.PP
Send a message to a share library peer. \fBParameters:\fP
.RS 4
\fIdest_key\fP Peer key of message destination. Specifying NULL indicates to use the peer used to open the message queue. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBshmsgget()\fP 
.RE
.PP

.SS "int shmsgctl (int msg_qid, int cmd, int value)"
.PP
Set or retrieve message queue control attributes. 
.SS "int shmsgget (\fBshpeer_t\fP * peer)"
.PP
Obtain the message queue id from a share library peer. \fBParameters:\fP
.RS 4
\fIpeer\fP The destination peer message queue. 
.RE
.PP

.SS "int shmsgrcv (int msqid, void * msgp, size_t msgsz)"
.PP
Receive a message from a share library peer. 
.SS "int shmsgsnd (int msqid, const void * msgp, size_t msgsz)"
.PP
Send a message to a share library peer. \fBParameters:\fP
.RS 4
\fImsg_qid\fP The share library message queue id. 
.br
\fImsg_type\fP A non-zero user-defined categorical number. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBshmsgget()\fP 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "uint32_t \fBshmsg_t::__reserved_1__\fP\fC [inherited]\fP"
.PP
type of message 
.PP
Definition at line 694 of file shfs.h.
.SS "\fBshfs_attr_t\fP \fBshfs_hdr_t::attr\fP\fC [inherited]\fP"
.PP
A bitvector specifying inode attributes. 
.PP
Definition at line 408 of file shfs.h.
.SS "struct \fBshfs_ino_t\fP* \fBshfs_ino_t::base\fP\fC [read, inherited]\fP"
.PP
The root directory inode of the partition. \fBNote:\fP
.RS 4
The root inode is self-circular for the root inode. 
.PP
This variable is not saved as part of the fileystem inode. 
.RE
.PP

.PP
Definition at line 510 of file shfs.h.
.SS "\fBshfs_ino_t\fP* \fBshfs_t::base_ino\fP\fC [inherited]\fP"
.PP
Root directory. 
.PP
Definition at line 561 of file shfs.h.
.SS "\fBshbuf_t\fP* \fBshfs_journal_t::buff\fP\fC [inherited]\fP"
.PP
The data segment of the journaled sharefs file system. 
.PP
Definition at line 821 of file shfs.h.
.SS "off_t \fBshfs_ino_buf::buff_of\fP\fC [inherited]\fP"
.PP
offset for data segment from beginning inode data 
.PP
Definition at line 475 of file shfs.h.
.SS "off_t \fBshfs_ino_buf::buff_pos\fP\fC [inherited]\fP"
.PP
current IO read/write index position of data segment (buff). 
.PP
Definition at line 477 of file shfs.h.
.SS "\fBshmeta_t\fP* \fBshfs_ino_t::cmeta\fP\fC [inherited]\fP"
.PP
Inode entities that are contained inside this [directory] inode. 
.PP
Definition at line 515 of file shfs.h.
.SS "uint64_t \fBshfs_hdr_t::crc\fP\fC [inherited]\fP"
.PP
A crc checksum representation of the underlying data. 
.PP
Definition at line 403 of file shfs.h.
.SS "\fBshtime_t\fP \fBshfs_hdr_t::ctime\fP\fC [inherited]\fP"
.PP
The time that the inode was created. 
.PP
Definition at line 393 of file shfs.h.
.SS "\fBshfs_ino_t\fP* \fBshfs_t::cur_ino\fP\fC [inherited]\fP"
.PP
Application's current working directory. 
.PP
Definition at line 566 of file shfs.h.
.SS "unsigned char \fBshmsgq_t::data\fP[0]\fC [inherited]\fP"
.PP
raw message content data 
.PP
Definition at line 726 of file shfs.h.
.SS "\fBshkey_t\fP \fBshmsg_t::dest_key\fP\fC [inherited]\fP"
.PP
destination peer of message. 
.PP
Definition at line 682 of file shfs.h.
.SS "uint32_t \fBshmsgq_t::flags\fP\fC [inherited]\fP"
.PP
message queue flags SHMSGF_XX 
.PP
Definition at line 705 of file shfs.h.
.SS "\fBshfs_ino_type_t\fP \fBshfs_hdr_t::format\fP\fC [inherited]\fP"
.PP
Type of inode data contained. 
.PP
Definition at line 419 of file shfs.h.
.SS "\fBshfs_idx_t\fP \fBshfs_hdr_t::fpos\fP\fC [inherited]\fP"
.PP
The position of the first inode in a chain. 
.PP
Definition at line 434 of file shfs.h.
.SS "int \fBshfs_journal_t::index\fP\fC [inherited]\fP"
.PP
The index number of the journal. This value ranges from 0 to ( \fCSHFS_MAX_JOURNAL\fP - 1 ). 
.PP
Definition at line 816 of file shfs.h.
.SS "\fBshfs_inode_off_t\fP \fBshfs_idx_t::ino\fP\fC [inherited]\fP"
.PP
An inode index in journal to initial data block. 
.PP
Definition at line 340 of file shfs.h.
.SS "\fBshmeta_t\fP* \fBshfs_ino_t::meta\fP\fC [inherited]\fP"
.PP
Primary meta definitions associated with the inode. 
.PP
Definition at line 520 of file shfs.h.
.SS "\fBshmsg_t\fP \fBshmsgq_t::msg\fP[2048]\fC [inherited]\fP"
.PP
table of message definitions 
.PP
Definition at line 723 of file shfs.h.
.SS "uint32_t \fBshmsg_t::msg_of\fP\fC [inherited]\fP"
.PP
offset of message data 
.PP
Definition at line 691 of file shfs.h.
.SS "uint32_t \fBshmsg_t::msg_qid\fP\fC [inherited]\fP"
.PP
message queue id 
.PP
Definition at line 685 of file shfs.h.
.SS "uint32_t \fBshmsg_t::msg_size\fP\fC [inherited]\fP"
.PP
total size of message content 
.PP
Definition at line 688 of file shfs.h.
.SS "\fBshtime_t\fP \fBshfs_hdr_t::mtime\fP\fC [inherited]\fP"
.PP
The last time this inode was written to. 
.PP
Definition at line 398 of file shfs.h.
.SS "\fBshfs_idx_t\fP \fBshfs_hdr_t::npos\fP\fC [inherited]\fP"
.PP
The position of the next inode in a chain. 
.PP
Definition at line 429 of file shfs.h.
.SS "\fBshfs_ino_t\fP \fBshfs_t::p_node\fP\fC [inherited]\fP"
.PP
Root partition inode (supernode). \fBNote:\fP
.RS 4
This inode references the root directory of a partition. 
.RE
.PP

.PP
Definition at line 572 of file shfs.h.
.SS "struct \fBshfs_ino_t\fP* \fBshfs_ino_t::parent\fP\fC [read, inherited]\fP"
.PP
The parent inode containing this inode. \fBNote:\fP
.RS 4
The root inode will have a parent of NULL. 
.PP
This variable is not saved as part of the fileystem inode. 
.RE
.PP

.PP
Definition at line 503 of file shfs.h.
.SS "char \fBshfs_journal_t::path\fP[4095+1]\fC [inherited]\fP"
.PP
The path to the sharefs partition journal on the local filesystem. 
.PP
Definition at line 826 of file shfs.h.
.SS "\fBshpeer_t\fP \fBshfs_t::peer\fP\fC [inherited]\fP"
.PP
The machine related to the sharefs inode's partition. \fBNote:\fP
.RS 4
This variable is not saved as part of the fileystem inode. 
.RE
.PP

.PP
Definition at line 556 of file shfs.h.
.SS "unsigned char* \fBshfs_ino_t::pool\fP\fC [inherited]\fP"
.PP
Type-specific allocated memory pool for inode. 
.PP
Definition at line 525 of file shfs.h.
.SS "\fBshfs_idx_t\fP \fBshfs_hdr_t::pos\fP\fC [inherited]\fP"
.PP
Inode position in the partition. 
.PP
Definition at line 424 of file shfs.h.
.SS "unsigned char \fBshfs_block_t::raw\fP[(2048-sizeof(\fBshfs_hdr_t\fP))]\fC [inherited]\fP"
.PP
The data segment of the inode block. 
.PP
Definition at line 466 of file shfs.h.
.SS "uint32_t \fBshmsgq_t::read_idx\fP\fC [inherited]\fP"
.PP
read msg seek offset 
.PP
Definition at line 711 of file shfs.h.
.SS "uint32_t \fBshmsgq_t::read_of\fP\fC [inherited]\fP"
.PP
read data seek offset 
.PP
Definition at line 717 of file shfs.h.
.SS "\fBshkey_t\fP \fBshfs_rev_t::rev_inode\fP\fC [inherited]\fP"
.PP
name key of revision inode. 
.PP
Definition at line 1524 of file shfs.h.
.SS "\fBshsize_t\fP \fBshfs_hdr_t::size\fP\fC [inherited]\fP"
.PP
The total size of the data segment being referenced. 
.PP
Definition at line 388 of file shfs.h.
.SS "\fBshfs_t\fP* \fBshfs_ino_t::tree\fP\fC [inherited]\fP"
.PP
The sharefs partition this inode is a part of. 
.PP
Definition at line 496 of file shfs.h.
.SS "\fBshfs_ino_type_t\fP \fBshfs_hdr_t::type\fP\fC [inherited]\fP"
.PP
Type of inode. \fBSee also:\fP
.RS 4
\fBSHINODE_FILE\fP 
.RE
.PP

.PP
Definition at line 414 of file shfs.h.
.SS "uint32_t \fBshmsgq_t::write_idx\fP\fC [inherited]\fP"
.PP
write msg seek offset 
.PP
Definition at line 714 of file shfs.h.
.SS "uint32_t \fBshmsgq_t::write_of\fP\fC [inherited]\fP"
.PP
write data seek offset 
.PP
Definition at line 720 of file shfs.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for libshare from the source code.
